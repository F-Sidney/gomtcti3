///////////////////////////////////////////////////////////////////////////////////////
// Copyright Avaya Inc. All Rights reserved
//  ipo_mtcti3.proto
//  Version 1.0
///////////////////////////////////////////////////////////////////////////////////////

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: ipo_mtcti3.proto

package ipo_mtcti3

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TrunkInfo_TrunkType int32

const (
	TrunkInfo_NoTrunk   TrunkInfo_TrunkType = 0
	TrunkInfo_TrunkSIP  TrunkInfo_TrunkType = 1
	TrunkInfo_TrunkISDN TrunkInfo_TrunkType = 2
	TrunkInfo_TrunkH323 TrunkInfo_TrunkType = 3
	TrunkInfo_TrunkT1   TrunkInfo_TrunkType = 4
	TrunkInfo_TrunkR2   TrunkInfo_TrunkType = 5
	TrunkInfo_TrunkAlog TrunkInfo_TrunkType = 6
)

// Enum value maps for TrunkInfo_TrunkType.
var (
	TrunkInfo_TrunkType_name = map[int32]string{
		0: "NoTrunk",
		1: "TrunkSIP",
		2: "TrunkISDN",
		3: "TrunkH323",
		4: "TrunkT1",
		5: "TrunkR2",
		6: "TrunkAlog",
	}
	TrunkInfo_TrunkType_value = map[string]int32{
		"NoTrunk":   0,
		"TrunkSIP":  1,
		"TrunkISDN": 2,
		"TrunkH323": 3,
		"TrunkT1":   4,
		"TrunkR2":   5,
		"TrunkAlog": 6,
	}
)

func (x TrunkInfo_TrunkType) Enum() *TrunkInfo_TrunkType {
	p := new(TrunkInfo_TrunkType)
	*p = x
	return p
}

func (x TrunkInfo_TrunkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrunkInfo_TrunkType) Descriptor() protoreflect.EnumDescriptor {
	return file_ipo_mtcti3_proto_enumTypes[0].Descriptor()
}

func (TrunkInfo_TrunkType) Type() protoreflect.EnumType {
	return &file_ipo_mtcti3_proto_enumTypes[0]
}

func (x TrunkInfo_TrunkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrunkInfo_TrunkType.Descriptor instead.
func (TrunkInfo_TrunkType) EnumDescriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{2, 0}
}

type ConferenceMember_State int32

const (
	ConferenceMember_UNKNOWN            ConferenceMember_State = 0
	ConferenceMember_DIALTONE           ConferenceMember_State = 1
	ConferenceMember_DIALLING           ConferenceMember_State = 2
	ConferenceMember_DIALLED            ConferenceMember_State = 3
	ConferenceMember_RINGING            ConferenceMember_State = 4
	ConferenceMember_RINGBACK           ConferenceMember_State = 5
	ConferenceMember_CONNECTED          ConferenceMember_State = 6
	ConferenceMember_ONHOLD             ConferenceMember_State = 7
	ConferenceMember_ONHOLDPENDTRANSFER ConferenceMember_State = 8
	ConferenceMember_ONHOLDPENDCONF     ConferenceMember_State = 9
	ConferenceMember_DISCONNECTED       ConferenceMember_State = 10
	ConferenceMember_BUSY               ConferenceMember_State = 11
	ConferenceMember_FAILED             ConferenceMember_State = 12
	ConferenceMember_WAITINGFORACCT     ConferenceMember_State = 13
	ConferenceMember_WAITINGFORAUTH     ConferenceMember_State = 14
	ConferenceMember_WAITINGFORLINE     ConferenceMember_State = 15
)

// Enum value maps for ConferenceMember_State.
var (
	ConferenceMember_State_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "DIALTONE",
		2:  "DIALLING",
		3:  "DIALLED",
		4:  "RINGING",
		5:  "RINGBACK",
		6:  "CONNECTED",
		7:  "ONHOLD",
		8:  "ONHOLDPENDTRANSFER",
		9:  "ONHOLDPENDCONF",
		10: "DISCONNECTED",
		11: "BUSY",
		12: "FAILED",
		13: "WAITINGFORACCT",
		14: "WAITINGFORAUTH",
		15: "WAITINGFORLINE",
	}
	ConferenceMember_State_value = map[string]int32{
		"UNKNOWN":            0,
		"DIALTONE":           1,
		"DIALLING":           2,
		"DIALLED":            3,
		"RINGING":            4,
		"RINGBACK":           5,
		"CONNECTED":          6,
		"ONHOLD":             7,
		"ONHOLDPENDTRANSFER": 8,
		"ONHOLDPENDCONF":     9,
		"DISCONNECTED":       10,
		"BUSY":               11,
		"FAILED":             12,
		"WAITINGFORACCT":     13,
		"WAITINGFORAUTH":     14,
		"WAITINGFORLINE":     15,
	}
)

func (x ConferenceMember_State) Enum() *ConferenceMember_State {
	p := new(ConferenceMember_State)
	*p = x
	return p
}

func (x ConferenceMember_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConferenceMember_State) Descriptor() protoreflect.EnumDescriptor {
	return file_ipo_mtcti3_proto_enumTypes[1].Descriptor()
}

func (ConferenceMember_State) Type() protoreflect.EnumType {
	return &file_ipo_mtcti3_proto_enumTypes[1]
}

func (x ConferenceMember_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConferenceMember_State.Descriptor instead.
func (ConferenceMember_State) EnumDescriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{12, 0}
}

type ConferenceMember_Direction int32

const (
	ConferenceMember_UNDEFINED ConferenceMember_Direction = 0
	ConferenceMember_OUTBOUND  ConferenceMember_Direction = 1
	ConferenceMember_INBOUND   ConferenceMember_Direction = 2
	ConferenceMember_PICKUP    ConferenceMember_Direction = 3
)

// Enum value maps for ConferenceMember_Direction.
var (
	ConferenceMember_Direction_name = map[int32]string{
		0: "UNDEFINED",
		1: "OUTBOUND",
		2: "INBOUND",
		3: "PICKUP",
	}
	ConferenceMember_Direction_value = map[string]int32{
		"UNDEFINED": 0,
		"OUTBOUND":  1,
		"INBOUND":   2,
		"PICKUP":    3,
	}
)

func (x ConferenceMember_Direction) Enum() *ConferenceMember_Direction {
	p := new(ConferenceMember_Direction)
	*p = x
	return p
}

func (x ConferenceMember_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConferenceMember_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_ipo_mtcti3_proto_enumTypes[2].Descriptor()
}

func (ConferenceMember_Direction) Type() protoreflect.EnumType {
	return &file_ipo_mtcti3_proto_enumTypes[2]
}

func (x ConferenceMember_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConferenceMember_Direction.Descriptor instead.
func (ConferenceMember_Direction) EnumDescriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{12, 1}
}

type ConferenceMember_FailedCause int32

const (
	ConferenceMember_UNSET             ConferenceMember_FailedCause = 0
	ConferenceMember_UNSPECIFIED       ConferenceMember_FailedCause = 1
	ConferenceMember_UNALLOCATEDNUMBER ConferenceMember_FailedCause = 2
	ConferenceMember_REJECTED          ConferenceMember_FailedCause = 3
	ConferenceMember_NUMBEROOO         ConferenceMember_FailedCause = 4
	ConferenceMember_NETWORKOOO        ConferenceMember_FailedCause = 5
	ConferenceMember_BARRED            ConferenceMember_FailedCause = 6
	ConferenceMember_NOCHANNEL         ConferenceMember_FailedCause = 7
	ConferenceMember_NOACCOUNTCODE     ConferenceMember_FailedCause = 8
	ConferenceMember_NOAUTHCODE        ConferenceMember_FailedCause = 9
	ConferenceMember_NOLICENCE         ConferenceMember_FailedCause = 10
	ConferenceMember_LOCALRESOURCES    ConferenceMember_FailedCause = 11
	ConferenceMember_BANDWIDTH         ConferenceMember_FailedCause = 12
	ConferenceMember_COMPATIBILITY     ConferenceMember_FailedCause = 13
	ConferenceMember_CANTRECORD        ConferenceMember_FailedCause = 14
)

// Enum value maps for ConferenceMember_FailedCause.
var (
	ConferenceMember_FailedCause_name = map[int32]string{
		0:  "UNSET",
		1:  "UNSPECIFIED",
		2:  "UNALLOCATEDNUMBER",
		3:  "REJECTED",
		4:  "NUMBEROOO",
		5:  "NETWORKOOO",
		6:  "BARRED",
		7:  "NOCHANNEL",
		8:  "NOACCOUNTCODE",
		9:  "NOAUTHCODE",
		10: "NOLICENCE",
		11: "LOCALRESOURCES",
		12: "BANDWIDTH",
		13: "COMPATIBILITY",
		14: "CANTRECORD",
	}
	ConferenceMember_FailedCause_value = map[string]int32{
		"UNSET":             0,
		"UNSPECIFIED":       1,
		"UNALLOCATEDNUMBER": 2,
		"REJECTED":          3,
		"NUMBEROOO":         4,
		"NETWORKOOO":        5,
		"BARRED":            6,
		"NOCHANNEL":         7,
		"NOACCOUNTCODE":     8,
		"NOAUTHCODE":        9,
		"NOLICENCE":         10,
		"LOCALRESOURCES":    11,
		"BANDWIDTH":         12,
		"COMPATIBILITY":     13,
		"CANTRECORD":        14,
	}
)

func (x ConferenceMember_FailedCause) Enum() *ConferenceMember_FailedCause {
	p := new(ConferenceMember_FailedCause)
	*p = x
	return p
}

func (x ConferenceMember_FailedCause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConferenceMember_FailedCause) Descriptor() protoreflect.EnumDescriptor {
	return file_ipo_mtcti3_proto_enumTypes[3].Descriptor()
}

func (ConferenceMember_FailedCause) Type() protoreflect.EnumType {
	return &file_ipo_mtcti3_proto_enumTypes[3]
}

func (x ConferenceMember_FailedCause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConferenceMember_FailedCause.Descriptor instead.
func (ConferenceMember_FailedCause) EnumDescriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{12, 2}
}

type CallInfo_State int32

const (
	CallInfo_UNKNOWN                 CallInfo_State = 0
	CallInfo_DIALTONE                CallInfo_State = 1
	CallInfo_DIALLING                CallInfo_State = 2
	CallInfo_DIALLED                 CallInfo_State = 3
	CallInfo_RINGING                 CallInfo_State = 4
	CallInfo_RINGBACK                CallInfo_State = 5
	CallInfo_CONNECTED               CallInfo_State = 6
	CallInfo_ONHOLD                  CallInfo_State = 7
	CallInfo_ONHOLDPENDTRANSFER      CallInfo_State = 8
	CallInfo_ONHOLDPENDCONF          CallInfo_State = 9
	CallInfo_DISCONNECTED            CallInfo_State = 10
	CallInfo_BUSY                    CallInfo_State = 11
	CallInfo_FAILED                  CallInfo_State = 12
	CallInfo_WAITINGFORACCT          CallInfo_State = 13
	CallInfo_WAITINGFORAUTH          CallInfo_State = 14
	CallInfo_WAITINGFORLINE          CallInfo_State = 15
	CallInfo_REMINDER                CallInfo_State = 16
	CallInfo_AFTERCALLWORK           CallInfo_State = 17
	CallInfo_RINGINGDIVERT           CallInfo_State = 18
	CallInfo_RINGINGVOICEMAIL        CallInfo_State = 19
	CallInfo_ANSWEREDBYVOICEMAIL     CallInfo_State = 20
	CallInfo_LEAVINGVOICEMAILMESSAGE CallInfo_State = 21
	CallInfo_QUEUEING                CallInfo_State = 22
	CallInfo_RETARGETING             CallInfo_State = 23
)

// Enum value maps for CallInfo_State.
var (
	CallInfo_State_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "DIALTONE",
		2:  "DIALLING",
		3:  "DIALLED",
		4:  "RINGING",
		5:  "RINGBACK",
		6:  "CONNECTED",
		7:  "ONHOLD",
		8:  "ONHOLDPENDTRANSFER",
		9:  "ONHOLDPENDCONF",
		10: "DISCONNECTED",
		11: "BUSY",
		12: "FAILED",
		13: "WAITINGFORACCT",
		14: "WAITINGFORAUTH",
		15: "WAITINGFORLINE",
		16: "REMINDER",
		17: "AFTERCALLWORK",
		18: "RINGINGDIVERT",
		19: "RINGINGVOICEMAIL",
		20: "ANSWEREDBYVOICEMAIL",
		21: "LEAVINGVOICEMAILMESSAGE",
		22: "QUEUEING",
		23: "RETARGETING",
	}
	CallInfo_State_value = map[string]int32{
		"UNKNOWN":                 0,
		"DIALTONE":                1,
		"DIALLING":                2,
		"DIALLED":                 3,
		"RINGING":                 4,
		"RINGBACK":                5,
		"CONNECTED":               6,
		"ONHOLD":                  7,
		"ONHOLDPENDTRANSFER":      8,
		"ONHOLDPENDCONF":          9,
		"DISCONNECTED":            10,
		"BUSY":                    11,
		"FAILED":                  12,
		"WAITINGFORACCT":          13,
		"WAITINGFORAUTH":          14,
		"WAITINGFORLINE":          15,
		"REMINDER":                16,
		"AFTERCALLWORK":           17,
		"RINGINGDIVERT":           18,
		"RINGINGVOICEMAIL":        19,
		"ANSWEREDBYVOICEMAIL":     20,
		"LEAVINGVOICEMAILMESSAGE": 21,
		"QUEUEING":                22,
		"RETARGETING":             23,
	}
)

func (x CallInfo_State) Enum() *CallInfo_State {
	p := new(CallInfo_State)
	*p = x
	return p
}

func (x CallInfo_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallInfo_State) Descriptor() protoreflect.EnumDescriptor {
	return file_ipo_mtcti3_proto_enumTypes[4].Descriptor()
}

func (CallInfo_State) Type() protoreflect.EnumType {
	return &file_ipo_mtcti3_proto_enumTypes[4]
}

func (x CallInfo_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallInfo_State.Descriptor instead.
func (CallInfo_State) EnumDescriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{13, 0}
}

type CallInfo_Direction int32

const (
	CallInfo_UNDEFINED CallInfo_Direction = 0
	CallInfo_OUTBOUND  CallInfo_Direction = 1
	CallInfo_INBOUND   CallInfo_Direction = 2
	CallInfo_PICKUP    CallInfo_Direction = 3
)

// Enum value maps for CallInfo_Direction.
var (
	CallInfo_Direction_name = map[int32]string{
		0: "UNDEFINED",
		1: "OUTBOUND",
		2: "INBOUND",
		3: "PICKUP",
	}
	CallInfo_Direction_value = map[string]int32{
		"UNDEFINED": 0,
		"OUTBOUND":  1,
		"INBOUND":   2,
		"PICKUP":    3,
	}
)

func (x CallInfo_Direction) Enum() *CallInfo_Direction {
	p := new(CallInfo_Direction)
	*p = x
	return p
}

func (x CallInfo_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallInfo_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_ipo_mtcti3_proto_enumTypes[5].Descriptor()
}

func (CallInfo_Direction) Type() protoreflect.EnumType {
	return &file_ipo_mtcti3_proto_enumTypes[5]
}

func (x CallInfo_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallInfo_Direction.Descriptor instead.
func (CallInfo_Direction) EnumDescriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{13, 1}
}

type CallInfo_FailedCause int32

const (
	CallInfo_UNSET             CallInfo_FailedCause = 0
	CallInfo_UNSPECIFIED       CallInfo_FailedCause = 1
	CallInfo_UNALLOCATEDNUMBER CallInfo_FailedCause = 2
	CallInfo_REJECTED          CallInfo_FailedCause = 3
	CallInfo_NUMBEROOO         CallInfo_FailedCause = 4
	CallInfo_NETWORKOOO        CallInfo_FailedCause = 5
	CallInfo_BARRED            CallInfo_FailedCause = 6
	CallInfo_NOCHANNEL         CallInfo_FailedCause = 7
	CallInfo_NOACCOUNTCODE     CallInfo_FailedCause = 8
	CallInfo_NOAUTHCODE        CallInfo_FailedCause = 9
	CallInfo_NOLICENCE         CallInfo_FailedCause = 10
	CallInfo_LOCALRESOURCES    CallInfo_FailedCause = 11
	CallInfo_BANDWIDTH         CallInfo_FailedCause = 12
	CallInfo_COMPATIBILITY     CallInfo_FailedCause = 13
	CallInfo_CANTRECORD        CallInfo_FailedCause = 14
	CallInfo_NORESPONSE        CallInfo_FailedCause = 15
)

// Enum value maps for CallInfo_FailedCause.
var (
	CallInfo_FailedCause_name = map[int32]string{
		0:  "UNSET",
		1:  "UNSPECIFIED",
		2:  "UNALLOCATEDNUMBER",
		3:  "REJECTED",
		4:  "NUMBEROOO",
		5:  "NETWORKOOO",
		6:  "BARRED",
		7:  "NOCHANNEL",
		8:  "NOACCOUNTCODE",
		9:  "NOAUTHCODE",
		10: "NOLICENCE",
		11: "LOCALRESOURCES",
		12: "BANDWIDTH",
		13: "COMPATIBILITY",
		14: "CANTRECORD",
		15: "NORESPONSE",
	}
	CallInfo_FailedCause_value = map[string]int32{
		"UNSET":             0,
		"UNSPECIFIED":       1,
		"UNALLOCATEDNUMBER": 2,
		"REJECTED":          3,
		"NUMBEROOO":         4,
		"NETWORKOOO":        5,
		"BARRED":            6,
		"NOCHANNEL":         7,
		"NOACCOUNTCODE":     8,
		"NOAUTHCODE":        9,
		"NOLICENCE":         10,
		"LOCALRESOURCES":    11,
		"BANDWIDTH":         12,
		"COMPATIBILITY":     13,
		"CANTRECORD":        14,
		"NORESPONSE":        15,
	}
)

func (x CallInfo_FailedCause) Enum() *CallInfo_FailedCause {
	p := new(CallInfo_FailedCause)
	*p = x
	return p
}

func (x CallInfo_FailedCause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallInfo_FailedCause) Descriptor() protoreflect.EnumDescriptor {
	return file_ipo_mtcti3_proto_enumTypes[6].Descriptor()
}

func (CallInfo_FailedCause) Type() protoreflect.EnumType {
	return &file_ipo_mtcti3_proto_enumTypes[6]
}

func (x CallInfo_FailedCause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallInfo_FailedCause.Descriptor instead.
func (CallInfo_FailedCause) EnumDescriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{13, 2}
}

type MemberFunctionData_Action int32

const (
	MemberFunctionData_None     MemberFunctionData_Action = 0
	MemberFunctionData_DropCall MemberFunctionData_Action = 1
	MemberFunctionData_MuteOn   MemberFunctionData_Action = 2
	MemberFunctionData_MuteOff  MemberFunctionData_Action = 3
)

// Enum value maps for MemberFunctionData_Action.
var (
	MemberFunctionData_Action_name = map[int32]string{
		0: "None",
		1: "DropCall",
		2: "MuteOn",
		3: "MuteOff",
	}
	MemberFunctionData_Action_value = map[string]int32{
		"None":     0,
		"DropCall": 1,
		"MuteOn":   2,
		"MuteOff":  3,
	}
)

func (x MemberFunctionData_Action) Enum() *MemberFunctionData_Action {
	p := new(MemberFunctionData_Action)
	*p = x
	return p
}

func (x MemberFunctionData_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MemberFunctionData_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_ipo_mtcti3_proto_enumTypes[7].Descriptor()
}

func (MemberFunctionData_Action) Type() protoreflect.EnumType {
	return &file_ipo_mtcti3_proto_enumTypes[7]
}

func (x MemberFunctionData_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MemberFunctionData_Action.Descriptor instead.
func (MemberFunctionData_Action) EnumDescriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{17, 0}
}

type CallFunction_Action int32

const (
	CallFunction_None                  CallFunction_Action = 0
	CallFunction_DropCall              CallFunction_Action = 1
	CallFunction_AnswerCall            CallFunction_Action = 2
	CallFunction_HoldCall              CallFunction_Action = 3
	CallFunction_UnHoldCall            CallFunction_Action = 4
	CallFunction_BlindTransfer         CallFunction_Action = 5
	CallFunction_Redirect              CallFunction_Action = 6
	CallFunction_Dial                  CallFunction_Action = 7
	CallFunction_Park                  CallFunction_Action = 8
	CallFunction_SetupTransfer         CallFunction_Action = 9
	CallFunction_SetupConf             CallFunction_Action = 10
	CallFunction_CompleteTransfer      CallFunction_Action = 11
	CallFunction_CompleteConf          CallFunction_Action = 12
	CallFunction_AddToConf             CallFunction_Action = 13
	CallFunction_MemberFunction        CallFunction_Action = 14
	CallFunction_SetTag                CallFunction_Action = 15
	CallFunction_SetAccountCode        CallFunction_Action = 16
	CallFunction_SetNotes              CallFunction_Action = 17
	CallFunction_PushToEC500           CallFunction_Action = 18
	CallFunction_GenerateDigits        CallFunction_Action = 19
	CallFunction_ShortCodeAction       CallFunction_Action = 20
	CallFunction_Unused21              CallFunction_Action = 21
	CallFunction_AnswerPage            CallFunction_Action = 22
	CallFunction_ForceClear            CallFunction_Action = 23
	CallFunction_SetAuthCode           CallFunction_Action = 24
	CallFunction_CallRecordingOn       CallFunction_Action = 25
	CallFunction_CallRecordingOff      CallFunction_Action = 26
	CallFunction_PrivacyOn             CallFunction_Action = 27
	CallFunction_PrivacyOff            CallFunction_Action = 28
	CallFunction_MuteOn                CallFunction_Action = 29
	CallFunction_MuteOff               CallFunction_Action = 30
	CallFunction_Unused31              CallFunction_Action = 31
	CallFunction_AgentRecordingControl CallFunction_Action = 32
	CallFunction_Unused33              CallFunction_Action = 33
	CallFunction_SetPriority           CallFunction_Action = 34
	CallFunction_Finish                CallFunction_Action = 35
)

// Enum value maps for CallFunction_Action.
var (
	CallFunction_Action_name = map[int32]string{
		0:  "None",
		1:  "DropCall",
		2:  "AnswerCall",
		3:  "HoldCall",
		4:  "UnHoldCall",
		5:  "BlindTransfer",
		6:  "Redirect",
		7:  "Dial",
		8:  "Park",
		9:  "SetupTransfer",
		10: "SetupConf",
		11: "CompleteTransfer",
		12: "CompleteConf",
		13: "AddToConf",
		14: "MemberFunction",
		15: "SetTag",
		16: "SetAccountCode",
		17: "SetNotes",
		18: "PushToEC500",
		19: "GenerateDigits",
		20: "ShortCodeAction",
		21: "Unused21",
		22: "AnswerPage",
		23: "ForceClear",
		24: "SetAuthCode",
		25: "CallRecordingOn",
		26: "CallRecordingOff",
		27: "PrivacyOn",
		28: "PrivacyOff",
		29: "MuteOn",
		30: "MuteOff",
		31: "Unused31",
		32: "AgentRecordingControl",
		33: "Unused33",
		34: "SetPriority",
		35: "Finish",
	}
	CallFunction_Action_value = map[string]int32{
		"None":                  0,
		"DropCall":              1,
		"AnswerCall":            2,
		"HoldCall":              3,
		"UnHoldCall":            4,
		"BlindTransfer":         5,
		"Redirect":              6,
		"Dial":                  7,
		"Park":                  8,
		"SetupTransfer":         9,
		"SetupConf":             10,
		"CompleteTransfer":      11,
		"CompleteConf":          12,
		"AddToConf":             13,
		"MemberFunction":        14,
		"SetTag":                15,
		"SetAccountCode":        16,
		"SetNotes":              17,
		"PushToEC500":           18,
		"GenerateDigits":        19,
		"ShortCodeAction":       20,
		"Unused21":              21,
		"AnswerPage":            22,
		"ForceClear":            23,
		"SetAuthCode":           24,
		"CallRecordingOn":       25,
		"CallRecordingOff":      26,
		"PrivacyOn":             27,
		"PrivacyOff":            28,
		"MuteOn":                29,
		"MuteOff":               30,
		"Unused31":              31,
		"AgentRecordingControl": 32,
		"Unused33":              33,
		"SetPriority":           34,
		"Finish":                35,
	}
)

func (x CallFunction_Action) Enum() *CallFunction_Action {
	p := new(CallFunction_Action)
	*p = x
	return p
}

func (x CallFunction_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallFunction_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_ipo_mtcti3_proto_enumTypes[8].Descriptor()
}

func (CallFunction_Action) Type() protoreflect.EnumType {
	return &file_ipo_mtcti3_proto_enumTypes[8]
}

func (x CallFunction_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallFunction_Action.Descriptor instead.
func (CallFunction_Action) EnumDescriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{19, 0}
}

type UpdateCallControl_Device int32

const (
	UpdateCallControl_UNSPECIFIED  UpdateCallControl_Device = 0
	UpdateCallControl_DESK         UpdateCallControl_Device = 1
	UpdateCallControl_MOBILEANY    UpdateCallControl_Device = 2
	UpdateCallControl_SOFTPHONEANY UpdateCallControl_Device = 3
)

// Enum value maps for UpdateCallControl_Device.
var (
	UpdateCallControl_Device_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "DESK",
		2: "MOBILEANY",
		3: "SOFTPHONEANY",
	}
	UpdateCallControl_Device_value = map[string]int32{
		"UNSPECIFIED":  0,
		"DESK":         1,
		"MOBILEANY":    2,
		"SOFTPHONEANY": 3,
	}
)

func (x UpdateCallControl_Device) Enum() *UpdateCallControl_Device {
	p := new(UpdateCallControl_Device)
	*p = x
	return p
}

func (x UpdateCallControl_Device) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateCallControl_Device) Descriptor() protoreflect.EnumDescriptor {
	return file_ipo_mtcti3_proto_enumTypes[9].Descriptor()
}

func (UpdateCallControl_Device) Type() protoreflect.EnumType {
	return &file_ipo_mtcti3_proto_enumTypes[9]
}

func (x UpdateCallControl_Device) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateCallControl_Device.Descriptor instead.
func (UpdateCallControl_Device) EnumDescriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{23, 0}
}

type NotifyQueue_ServiceMode int32

const (
	NotifyQueue_Unset  NotifyQueue_ServiceMode = 0
	NotifyQueue_Active NotifyQueue_ServiceMode = 1
	NotifyQueue_NS     NotifyQueue_ServiceMode = 2
	NotifyQueue_OOS    NotifyQueue_ServiceMode = 3
)

// Enum value maps for NotifyQueue_ServiceMode.
var (
	NotifyQueue_ServiceMode_name = map[int32]string{
		0: "Unset",
		1: "Active",
		2: "NS",
		3: "OOS",
	}
	NotifyQueue_ServiceMode_value = map[string]int32{
		"Unset":  0,
		"Active": 1,
		"NS":     2,
		"OOS":    3,
	}
)

func (x NotifyQueue_ServiceMode) Enum() *NotifyQueue_ServiceMode {
	p := new(NotifyQueue_ServiceMode)
	*p = x
	return p
}

func (x NotifyQueue_ServiceMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotifyQueue_ServiceMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ipo_mtcti3_proto_enumTypes[10].Descriptor()
}

func (NotifyQueue_ServiceMode) Type() protoreflect.EnumType {
	return &file_ipo_mtcti3_proto_enumTypes[10]
}

func (x NotifyQueue_ServiceMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotifyQueue_ServiceMode.Descriptor instead.
func (NotifyQueue_ServiceMode) EnumDescriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{37, 0}
}

type SetServiceMode_ServiceMode int32

const (
	SetServiceMode_Unset  SetServiceMode_ServiceMode = 0
	SetServiceMode_Active SetServiceMode_ServiceMode = 1
	SetServiceMode_NS     SetServiceMode_ServiceMode = 2
	SetServiceMode_OOS    SetServiceMode_ServiceMode = 3
)

// Enum value maps for SetServiceMode_ServiceMode.
var (
	SetServiceMode_ServiceMode_name = map[int32]string{
		0: "Unset",
		1: "Active",
		2: "NS",
		3: "OOS",
	}
	SetServiceMode_ServiceMode_value = map[string]int32{
		"Unset":  0,
		"Active": 1,
		"NS":     2,
		"OOS":    3,
	}
)

func (x SetServiceMode_ServiceMode) Enum() *SetServiceMode_ServiceMode {
	p := new(SetServiceMode_ServiceMode)
	*p = x
	return p
}

func (x SetServiceMode_ServiceMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetServiceMode_ServiceMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ipo_mtcti3_proto_enumTypes[11].Descriptor()
}

func (SetServiceMode_ServiceMode) Type() protoreflect.EnumType {
	return &file_ipo_mtcti3_proto_enumTypes[11]
}

func (x SetServiceMode_ServiceMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetServiceMode_ServiceMode.Descriptor instead.
func (SetServiceMode_ServiceMode) EnumDescriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{39, 0}
}

type PartyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numbertype      int32  `protobuf:"varint,1,opt,name=numbertype,proto3" json:"numbertype,omitempty"`
	Number          string `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	Subaddr         string `protobuf:"bytes,3,opt,name=subaddr,proto3" json:"subaddr,omitempty"`
	Name            string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Nametype        int32  `protobuf:"varint,5,opt,name=nametype,proto3" json:"nametype,omitempty"`
	Withheld        bool   `protobuf:"varint,6,opt,name=withheld,proto3" json:"withheld,omitempty"`
	Diversionreason int32  `protobuf:"varint,7,opt,name=diversionreason,proto3" json:"diversionreason,omitempty"`
}

func (x *PartyInfo) Reset() {
	*x = PartyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyInfo) ProtoMessage() {}

func (x *PartyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyInfo.ProtoReflect.Descriptor instead.
func (*PartyInfo) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{0}
}

func (x *PartyInfo) GetNumbertype() int32 {
	if x != nil {
		return x.Numbertype
	}
	return 0
}

func (x *PartyInfo) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *PartyInfo) GetSubaddr() string {
	if x != nil {
		return x.Subaddr
	}
	return ""
}

func (x *PartyInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PartyInfo) GetNametype() int32 {
	if x != nil {
		return x.Nametype
	}
	return 0
}

func (x *PartyInfo) GetWithheld() bool {
	if x != nil {
		return x.Withheld
	}
	return false
}

func (x *PartyInfo) GetDiversionreason() int32 {
	if x != nil {
		return x.Diversionreason
	}
	return 0
}

type DialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number      string `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	Calltype    int32  `protobuf:"varint,2,opt,name=calltype,proto3" json:"calltype,omitempty"`
	Withholdcli bool   `protobuf:"varint,3,opt,name=withholdcli,proto3" json:"withholdcli,omitempty"`
	Hidenumber  bool   `protobuf:"varint,4,opt,name=hidenumber,proto3" json:"hidenumber,omitempty"`
	Complete    bool   `protobuf:"varint,5,opt,name=complete,proto3" json:"complete,omitempty"`
	Madn        string `protobuf:"bytes,6,opt,name=madn,proto3" json:"madn,omitempty"`
	Subaddr     string `protobuf:"bytes,7,opt,name=subaddr,proto3" json:"subaddr,omitempty"`
	Allowcli    bool   `protobuf:"varint,8,opt,name=allowcli,proto3" json:"allowcli,omitempty"`
	Explicitcli string `protobuf:"bytes,9,opt,name=explicitcli,proto3" json:"explicitcli,omitempty"`
}

func (x *DialInfo) Reset() {
	*x = DialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialInfo) ProtoMessage() {}

func (x *DialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialInfo.ProtoReflect.Descriptor instead.
func (*DialInfo) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{1}
}

func (x *DialInfo) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *DialInfo) GetCalltype() int32 {
	if x != nil {
		return x.Calltype
	}
	return 0
}

func (x *DialInfo) GetWithholdcli() bool {
	if x != nil {
		return x.Withholdcli
	}
	return false
}

func (x *DialInfo) GetHidenumber() bool {
	if x != nil {
		return x.Hidenumber
	}
	return false
}

func (x *DialInfo) GetComplete() bool {
	if x != nil {
		return x.Complete
	}
	return false
}

func (x *DialInfo) GetMadn() string {
	if x != nil {
		return x.Madn
	}
	return ""
}

func (x *DialInfo) GetSubaddr() string {
	if x != nil {
		return x.Subaddr
	}
	return ""
}

func (x *DialInfo) GetAllowcli() bool {
	if x != nil {
		return x.Allowcli
	}
	return false
}

func (x *DialInfo) GetExplicitcli() string {
	if x != nil {
		return x.Explicitcli
	}
	return ""
}

type TrunkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trunktype TrunkInfo_TrunkType `protobuf:"varint,1,opt,name=trunktype,proto3,enum=main.TrunkInfo_TrunkType" json:"trunktype,omitempty"`
	Did       string              `protobuf:"bytes,5,opt,name=did,proto3" json:"did,omitempty"`
}

func (x *TrunkInfo) Reset() {
	*x = TrunkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrunkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrunkInfo) ProtoMessage() {}

func (x *TrunkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrunkInfo.ProtoReflect.Descriptor instead.
func (*TrunkInfo) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{2}
}

func (x *TrunkInfo) GetTrunktype() TrunkInfo_TrunkType {
	if x != nil {
		return x.Trunktype
	}
	return TrunkInfo_NoTrunk
}

func (x *TrunkInfo) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

type QueueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number         string `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	Name           string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Priority       int32  `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
	OverflowNumber string `protobuf:"bytes,6,opt,name=overflow_number,json=overflowNumber,proto3" json:"overflow_number,omitempty"`
	OverflowName   string `protobuf:"bytes,7,opt,name=overflow_name,json=overflowName,proto3" json:"overflow_name,omitempty"`
}

func (x *QueueInfo) Reset() {
	*x = QueueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueInfo) ProtoMessage() {}

func (x *QueueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueInfo.ProtoReflect.Descriptor instead.
func (*QueueInfo) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{3}
}

func (x *QueueInfo) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *QueueInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueueInfo) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *QueueInfo) GetOverflowNumber() string {
	if x != nil {
		return x.OverflowNumber
	}
	return ""
}

func (x *QueueInfo) GetOverflowName() string {
	if x != nil {
		return x.OverflowName
	}
	return ""
}

type EndInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gcid           []byte `protobuf:"bytes,1,opt,name=gcid,proto3" json:"gcid,omitempty"`
	Deviceclass    int32  `protobuf:"varint,2,opt,name=deviceclass,proto3" json:"deviceclass,omitempty"`
	Devicetype     int32  `protobuf:"varint,3,opt,name=devicetype,proto3" json:"devicetype,omitempty"`
	Deviceinstance int32  `protobuf:"varint,4,opt,name=deviceinstance,proto3" json:"deviceinstance,omitempty"`
	Teleworker     string `protobuf:"bytes,5,opt,name=teleworker,proto3" json:"teleworker,omitempty"`
}

func (x *EndInfo) Reset() {
	*x = EndInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndInfo) ProtoMessage() {}

func (x *EndInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndInfo.ProtoReflect.Descriptor instead.
func (*EndInfo) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{4}
}

func (x *EndInfo) GetGcid() []byte {
	if x != nil {
		return x.Gcid
	}
	return nil
}

func (x *EndInfo) GetDeviceclass() int32 {
	if x != nil {
		return x.Deviceclass
	}
	return 0
}

func (x *EndInfo) GetDevicetype() int32 {
	if x != nil {
		return x.Devicetype
	}
	return 0
}

func (x *EndInfo) GetDeviceinstance() int32 {
	if x != nil {
		return x.Deviceinstance
	}
	return 0
}

func (x *EndInfo) GetTeleworker() string {
	if x != nil {
		return x.Teleworker
	}
	return ""
}

type Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partyinfo *PartyInfo `protobuf:"bytes,1,opt,name=partyinfo,proto3" json:"partyinfo,omitempty"`
}

func (x *Target) Reset() {
	*x = Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target) ProtoMessage() {}

func (x *Target) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target.ProtoReflect.Descriptor instead.
func (*Target) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{5}
}

func (x *Target) GetPartyinfo() *PartyInfo {
	if x != nil {
		return x.Partyinfo
	}
	return nil
}

type Targets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target []*Target `protobuf:"bytes,1,rep,name=target,proto3" json:"target,omitempty"`
}

func (x *Targets) Reset() {
	*x = Targets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Targets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Targets) ProtoMessage() {}

func (x *Targets) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Targets.ProtoReflect.Descriptor instead.
func (*Targets) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{6}
}

func (x *Targets) GetTarget() []*Target {
	if x != nil {
		return x.Target
	}
	return nil
}

type PIntrinsics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pintrinsics []byte `protobuf:"bytes,1,opt,name=pintrinsics,proto3" json:"pintrinsics,omitempty"`
}

func (x *PIntrinsics) Reset() {
	*x = PIntrinsics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PIntrinsics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PIntrinsics) ProtoMessage() {}

func (x *PIntrinsics) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PIntrinsics.ProtoReflect.Descriptor instead.
func (*PIntrinsics) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{7}
}

func (x *PIntrinsics) GetPintrinsics() []byte {
	if x != nil {
		return x.Pintrinsics
	}
	return nil
}

type UCID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ucid []byte `protobuf:"bytes,1,opt,name=ucid,proto3" json:"ucid,omitempty"`
}

func (x *UCID) Reset() {
	*x = UCID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UCID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UCID) ProtoMessage() {}

func (x *UCID) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UCID.ProtoReflect.Descriptor instead.
func (*UCID) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{8}
}

func (x *UCID) GetUcid() []byte {
	if x != nil {
		return x.Ucid
	}
	return nil
}

type Notes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notes string `protobuf:"bytes,1,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *Notes) Reset() {
	*x = Notes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notes) ProtoMessage() {}

func (x *Notes) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notes.ProtoReflect.Descriptor instead.
func (*Notes) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{9}
}

func (x *Notes) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type CallData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language  string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Emergency bool   `protobuf:"varint,2,opt,name=emergency,proto3" json:"emergency,omitempty"`
	Privacy   bool   `protobuf:"varint,3,opt,name=privacy,proto3" json:"privacy,omitempty"`
	Secure    bool   `protobuf:"varint,4,opt,name=secure,proto3" json:"secure,omitempty"`
	Rprivacy  bool   `protobuf:"varint,5,opt,name=rprivacy,proto3" json:"rprivacy,omitempty"`
}

func (x *CallData) Reset() {
	*x = CallData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallData) ProtoMessage() {}

func (x *CallData) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallData.ProtoReflect.Descriptor instead.
func (*CallData) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{10}
}

func (x *CallData) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *CallData) GetEmergency() bool {
	if x != nil {
		return x.Emergency
	}
	return false
}

func (x *CallData) GetPrivacy() bool {
	if x != nil {
		return x.Privacy
	}
	return false
}

func (x *CallData) GetSecure() bool {
	if x != nil {
		return x.Secure
	}
	return false
}

func (x *CallData) GetRprivacy() bool {
	if x != nil {
		return x.Rprivacy
	}
	return false
}

type Absence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg int32  `protobuf:"varint,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Str string `protobuf:"bytes,2,opt,name=str,proto3" json:"str,omitempty"`
}

func (x *Absence) Reset() {
	*x = Absence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Absence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Absence) ProtoMessage() {}

func (x *Absence) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Absence.ProtoReflect.Descriptor instead.
func (*Absence) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{11}
}

func (x *Absence) GetMsg() int32 {
	if x != nil {
		return x.Msg
	}
	return 0
}

func (x *Absence) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

type ConferenceMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lref           int32                        `protobuf:"varint,2,opt,name=lref,proto3" json:"lref,omitempty"`
	State          ConferenceMember_State       `protobuf:"varint,5,opt,name=state,proto3,enum=main.ConferenceMember_State" json:"state,omitempty"`
	Direction      ConferenceMember_Direction   `protobuf:"varint,6,opt,name=direction,proto3,enum=main.ConferenceMember_Direction" json:"direction,omitempty"`
	Activeheld     bool                         `protobuf:"varint,7,opt,name=activeheld,proto3" json:"activeheld,omitempty"`
	Calledparty    string                       `protobuf:"bytes,10,opt,name=calledparty,proto3" json:"calledparty,omitempty"`
	Connectedparty *PartyInfo                   `protobuf:"bytes,12,opt,name=connectedparty,proto3" json:"connectedparty,omitempty"`
	Mute           bool                         `protobuf:"varint,16,opt,name=mute,proto3" json:"mute,omitempty"`
	Failedcause    ConferenceMember_FailedCause `protobuf:"varint,17,opt,name=failedcause,proto3,enum=main.ConferenceMember_FailedCause" json:"failedcause,omitempty"`
}

func (x *ConferenceMember) Reset() {
	*x = ConferenceMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConferenceMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConferenceMember) ProtoMessage() {}

func (x *ConferenceMember) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConferenceMember.ProtoReflect.Descriptor instead.
func (*ConferenceMember) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{12}
}

func (x *ConferenceMember) GetLref() int32 {
	if x != nil {
		return x.Lref
	}
	return 0
}

func (x *ConferenceMember) GetState() ConferenceMember_State {
	if x != nil {
		return x.State
	}
	return ConferenceMember_UNKNOWN
}

func (x *ConferenceMember) GetDirection() ConferenceMember_Direction {
	if x != nil {
		return x.Direction
	}
	return ConferenceMember_UNDEFINED
}

func (x *ConferenceMember) GetActiveheld() bool {
	if x != nil {
		return x.Activeheld
	}
	return false
}

func (x *ConferenceMember) GetCalledparty() string {
	if x != nil {
		return x.Calledparty
	}
	return ""
}

func (x *ConferenceMember) GetConnectedparty() *PartyInfo {
	if x != nil {
		return x.Connectedparty
	}
	return nil
}

func (x *ConferenceMember) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *ConferenceMember) GetFailedcause() ConferenceMember_FailedCause {
	if x != nil {
		return x.Failedcause
	}
	return ConferenceMember_UNSET
}

type CallInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Callid              int32                `protobuf:"varint,2,opt,name=callid,proto3" json:"callid,omitempty"`
	Referencecallid     int32                `protobuf:"varint,3,opt,name=referencecallid,proto3" json:"referencecallid,omitempty"`
	Relatedcallid       int32                `protobuf:"varint,4,opt,name=relatedcallid,proto3" json:"relatedcallid,omitempty"`
	State               CallInfo_State       `protobuf:"varint,5,opt,name=state,proto3,enum=main.CallInfo_State" json:"state,omitempty"`
	Direction           CallInfo_Direction   `protobuf:"varint,6,opt,name=direction,proto3,enum=main.CallInfo_Direction" json:"direction,omitempty"`
	Activeheld          bool                 `protobuf:"varint,7,opt,name=activeheld,proto3" json:"activeheld,omitempty"`
	Gcid                []byte               `protobuf:"bytes,8,opt,name=gcid,proto3" json:"gcid,omitempty"`
	Featuresavailable   int32                `protobuf:"varint,9,opt,name=featuresavailable,proto3" json:"featuresavailable,omitempty"`
	Calledparty         string               `protobuf:"bytes,10,opt,name=calledparty,proto3" json:"calledparty,omitempty"`
	Callingparty        *PartyInfo           `protobuf:"bytes,11,opt,name=callingparty,proto3" json:"callingparty,omitempty"`
	Connectedparty      *PartyInfo           `protobuf:"bytes,12,opt,name=connectedparty,proto3" json:"connectedparty,omitempty"`
	Originalcalledparty *PartyInfo           `protobuf:"bytes,13,opt,name=originalcalledparty,proto3" json:"originalcalledparty,omitempty"`
	Tag                 string               `protobuf:"bytes,14,opt,name=tag,proto3" json:"tag,omitempty"`
	Accountcode         string               `protobuf:"bytes,15,opt,name=accountcode,proto3" json:"accountcode,omitempty"`
	Mute                bool                 `protobuf:"varint,16,opt,name=mute,proto3" json:"mute,omitempty"`
	Failedcause         CallInfo_FailedCause `protobuf:"varint,17,opt,name=failedcause,proto3,enum=main.CallInfo_FailedCause" json:"failedcause,omitempty"`
	Featuresavailable2  int32                `protobuf:"varint,18,opt,name=featuresavailable2,proto3" json:"featuresavailable2,omitempty"`
	Recording           bool                 `protobuf:"varint,19,opt,name=recording,proto3" json:"recording,omitempty"`
	Parkslot            string               `protobuf:"bytes,20,opt,name=parkslot,proto3" json:"parkslot,omitempty"`
	Absence             *Absence             `protobuf:"bytes,21,opt,name=absence,proto3" json:"absence,omitempty"`
	Recordingpaused     bool                 `protobuf:"varint,22,opt,name=recordingpaused,proto3" json:"recordingpaused,omitempty"`
	Pagecall            bool                 `protobuf:"varint,23,opt,name=pagecall,proto3" json:"pagecall,omitempty"`
	Remoteinfo          *EndInfo             `protobuf:"bytes,50,opt,name=remoteinfo,proto3" json:"remoteinfo,omitempty"`
	Localinfo           []*EndInfo           `protobuf:"bytes,51,rep,name=localinfo,proto3" json:"localinfo,omitempty"`
	Conferencemember    []*ConferenceMember  `protobuf:"bytes,52,rep,name=conferencemember,proto3" json:"conferencemember,omitempty"`
	Dialinfo            *DialInfo            `protobuf:"bytes,53,opt,name=dialinfo,proto3" json:"dialinfo,omitempty"`
	Trunkinfo           *TrunkInfo           `protobuf:"bytes,54,opt,name=trunkinfo,proto3" json:"trunkinfo,omitempty"`
	Queueinfo           *QueueInfo           `protobuf:"bytes,55,opt,name=queueinfo,proto3" json:"queueinfo,omitempty"`
	Calldata            *CallData            `protobuf:"bytes,56,opt,name=calldata,proto3" json:"calldata,omitempty"`
	Notes               *Notes               `protobuf:"bytes,62,opt,name=notes,proto3" json:"notes,omitempty"`
	Ucid                *UCID                `protobuf:"bytes,63,opt,name=ucid,proto3" json:"ucid,omitempty"`
	Pintrinsics         *PIntrinsics         `protobuf:"bytes,64,opt,name=pintrinsics,proto3" json:"pintrinsics,omitempty"`
	Targets             *Targets             `protobuf:"bytes,67,opt,name=targets,proto3" json:"targets,omitempty"`
}

func (x *CallInfo) Reset() {
	*x = CallInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallInfo) ProtoMessage() {}

func (x *CallInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallInfo.ProtoReflect.Descriptor instead.
func (*CallInfo) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{13}
}

func (x *CallInfo) GetCallid() int32 {
	if x != nil {
		return x.Callid
	}
	return 0
}

func (x *CallInfo) GetReferencecallid() int32 {
	if x != nil {
		return x.Referencecallid
	}
	return 0
}

func (x *CallInfo) GetRelatedcallid() int32 {
	if x != nil {
		return x.Relatedcallid
	}
	return 0
}

func (x *CallInfo) GetState() CallInfo_State {
	if x != nil {
		return x.State
	}
	return CallInfo_UNKNOWN
}

func (x *CallInfo) GetDirection() CallInfo_Direction {
	if x != nil {
		return x.Direction
	}
	return CallInfo_UNDEFINED
}

func (x *CallInfo) GetActiveheld() bool {
	if x != nil {
		return x.Activeheld
	}
	return false
}

func (x *CallInfo) GetGcid() []byte {
	if x != nil {
		return x.Gcid
	}
	return nil
}

func (x *CallInfo) GetFeaturesavailable() int32 {
	if x != nil {
		return x.Featuresavailable
	}
	return 0
}

func (x *CallInfo) GetCalledparty() string {
	if x != nil {
		return x.Calledparty
	}
	return ""
}

func (x *CallInfo) GetCallingparty() *PartyInfo {
	if x != nil {
		return x.Callingparty
	}
	return nil
}

func (x *CallInfo) GetConnectedparty() *PartyInfo {
	if x != nil {
		return x.Connectedparty
	}
	return nil
}

func (x *CallInfo) GetOriginalcalledparty() *PartyInfo {
	if x != nil {
		return x.Originalcalledparty
	}
	return nil
}

func (x *CallInfo) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *CallInfo) GetAccountcode() string {
	if x != nil {
		return x.Accountcode
	}
	return ""
}

func (x *CallInfo) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *CallInfo) GetFailedcause() CallInfo_FailedCause {
	if x != nil {
		return x.Failedcause
	}
	return CallInfo_UNSET
}

func (x *CallInfo) GetFeaturesavailable2() int32 {
	if x != nil {
		return x.Featuresavailable2
	}
	return 0
}

func (x *CallInfo) GetRecording() bool {
	if x != nil {
		return x.Recording
	}
	return false
}

func (x *CallInfo) GetParkslot() string {
	if x != nil {
		return x.Parkslot
	}
	return ""
}

func (x *CallInfo) GetAbsence() *Absence {
	if x != nil {
		return x.Absence
	}
	return nil
}

func (x *CallInfo) GetRecordingpaused() bool {
	if x != nil {
		return x.Recordingpaused
	}
	return false
}

func (x *CallInfo) GetPagecall() bool {
	if x != nil {
		return x.Pagecall
	}
	return false
}

func (x *CallInfo) GetRemoteinfo() *EndInfo {
	if x != nil {
		return x.Remoteinfo
	}
	return nil
}

func (x *CallInfo) GetLocalinfo() []*EndInfo {
	if x != nil {
		return x.Localinfo
	}
	return nil
}

func (x *CallInfo) GetConferencemember() []*ConferenceMember {
	if x != nil {
		return x.Conferencemember
	}
	return nil
}

func (x *CallInfo) GetDialinfo() *DialInfo {
	if x != nil {
		return x.Dialinfo
	}
	return nil
}

func (x *CallInfo) GetTrunkinfo() *TrunkInfo {
	if x != nil {
		return x.Trunkinfo
	}
	return nil
}

func (x *CallInfo) GetQueueinfo() *QueueInfo {
	if x != nil {
		return x.Queueinfo
	}
	return nil
}

func (x *CallInfo) GetCalldata() *CallData {
	if x != nil {
		return x.Calldata
	}
	return nil
}

func (x *CallInfo) GetNotes() *Notes {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *CallInfo) GetUcid() *UCID {
	if x != nil {
		return x.Ucid
	}
	return nil
}

func (x *CallInfo) GetPintrinsics() *PIntrinsics {
	if x != nil {
		return x.Pintrinsics
	}
	return nil
}

func (x *CallInfo) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

type CallLost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Callid          int32  `protobuf:"varint,1,opt,name=callid,proto3" json:"callid,omitempty"`
	Referencecallid int32  `protobuf:"varint,2,opt,name=referencecallid,proto3" json:"referencecallid,omitempty"`
	Reason          int32  `protobuf:"varint,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Thisenddropped  bool   `protobuf:"varint,4,opt,name=thisenddropped,proto3" json:"thisenddropped,omitempty"`
	Description     string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CallLost) Reset() {
	*x = CallLost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallLost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallLost) ProtoMessage() {}

func (x *CallLost) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallLost.ProtoReflect.Descriptor instead.
func (*CallLost) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{14}
}

func (x *CallLost) GetCallid() int32 {
	if x != nil {
		return x.Callid
	}
	return 0
}

func (x *CallLost) GetReferencecallid() int32 {
	if x != nil {
		return x.Referencecallid
	}
	return 0
}

func (x *CallLost) GetReason() int32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

func (x *CallLost) GetThisenddropped() bool {
	if x != nil {
		return x.Thisenddropped
	}
	return false
}

func (x *CallLost) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type AgentRecordingControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pause  bool `protobuf:"varint,1,opt,name=pause,proto3" json:"pause,omitempty"`
	Resume bool `protobuf:"varint,2,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *AgentRecordingControl) Reset() {
	*x = AgentRecordingControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentRecordingControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentRecordingControl) ProtoMessage() {}

func (x *AgentRecordingControl) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentRecordingControl.ProtoReflect.Descriptor instead.
func (*AgentRecordingControl) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{15}
}

func (x *AgentRecordingControl) GetPause() bool {
	if x != nil {
		return x.Pause
	}
	return false
}

func (x *AgentRecordingControl) GetResume() bool {
	if x != nil {
		return x.Resume
	}
	return false
}

type ShortCodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Val      string `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
	Onbehalf string `protobuf:"bytes,3,opt,name=onbehalf,proto3" json:"onbehalf,omitempty"`
}

func (x *ShortCodeData) Reset() {
	*x = ShortCodeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortCodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortCodeData) ProtoMessage() {}

func (x *ShortCodeData) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortCodeData.ProtoReflect.Descriptor instead.
func (*ShortCodeData) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{16}
}

func (x *ShortCodeData) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ShortCodeData) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

func (x *ShortCodeData) GetOnbehalf() string {
	if x != nil {
		return x.Onbehalf
	}
	return ""
}

type MemberFunctionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lref   int32                     `protobuf:"varint,1,opt,name=lref,proto3" json:"lref,omitempty"`
	Action MemberFunctionData_Action `protobuf:"varint,2,opt,name=action,proto3,enum=main.MemberFunctionData_Action" json:"action,omitempty"`
}

func (x *MemberFunctionData) Reset() {
	*x = MemberFunctionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberFunctionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberFunctionData) ProtoMessage() {}

func (x *MemberFunctionData) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberFunctionData.ProtoReflect.Descriptor instead.
func (*MemberFunctionData) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{17}
}

func (x *MemberFunctionData) GetLref() int32 {
	if x != nil {
		return x.Lref
	}
	return 0
}

func (x *MemberFunctionData) GetAction() MemberFunctionData_Action {
	if x != nil {
		return x.Action
	}
	return MemberFunctionData_None
}

type CallInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Callid          int32 `protobuf:"varint,1,opt,name=callid,proto3" json:"callid,omitempty"`
	Referencecallid int32 `protobuf:"varint,2,opt,name=referencecallid,proto3" json:"referencecallid,omitempty"`
}

func (x *CallInstance) Reset() {
	*x = CallInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallInstance) ProtoMessage() {}

func (x *CallInstance) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallInstance.ProtoReflect.Descriptor instead.
func (*CallInstance) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{18}
}

func (x *CallInstance) GetCallid() int32 {
	if x != nil {
		return x.Callid
	}
	return 0
}

func (x *CallInstance) GetReferencecallid() int32 {
	if x != nil {
		return x.Referencecallid
	}
	return 0
}

type CallFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action             CallFunction_Action    `protobuf:"varint,1,opt,name=action,proto3,enum=main.CallFunction_Action" json:"action,omitempty"`
	Arg1               string                 `protobuf:"bytes,2,opt,name=arg1,proto3" json:"arg1,omitempty"`
	Shortcodedata      *ShortCodeData         `protobuf:"bytes,3,opt,name=shortcodedata,proto3" json:"shortcodedata,omitempty"`
	Memberfunctiondata *MemberFunctionData    `protobuf:"bytes,4,opt,name=memberfunctiondata,proto3" json:"memberfunctiondata,omitempty"`
	Callinst           []*CallInstance        `protobuf:"bytes,5,rep,name=callinst,proto3" json:"callinst,omitempty"`
	Agentrecording     *AgentRecordingControl `protobuf:"bytes,6,opt,name=agentrecording,proto3" json:"agentrecording,omitempty"`
	Tapimoh            bool                   `protobuf:"varint,8,opt,name=tapimoh,proto3" json:"tapimoh,omitempty"`
}

func (x *CallFunction) Reset() {
	*x = CallFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallFunction) ProtoMessage() {}

func (x *CallFunction) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallFunction.ProtoReflect.Descriptor instead.
func (*CallFunction) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{19}
}

func (x *CallFunction) GetAction() CallFunction_Action {
	if x != nil {
		return x.Action
	}
	return CallFunction_None
}

func (x *CallFunction) GetArg1() string {
	if x != nil {
		return x.Arg1
	}
	return ""
}

func (x *CallFunction) GetShortcodedata() *ShortCodeData {
	if x != nil {
		return x.Shortcodedata
	}
	return nil
}

func (x *CallFunction) GetMemberfunctiondata() *MemberFunctionData {
	if x != nil {
		return x.Memberfunctiondata
	}
	return nil
}

func (x *CallFunction) GetCallinst() []*CallInstance {
	if x != nil {
		return x.Callinst
	}
	return nil
}

func (x *CallFunction) GetAgentrecording() *AgentRecordingControl {
	if x != nil {
		return x.Agentrecording
	}
	return nil
}

func (x *CallFunction) GetTapimoh() bool {
	if x != nil {
		return x.Tapimoh
	}
	return false
}

type AdvancedMakeCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountcode string `protobuf:"bytes,1,opt,name=accountcode,proto3" json:"accountcode,omitempty"`
	Authcode    string `protobuf:"bytes,2,opt,name=authcode,proto3" json:"authcode,omitempty"`
	Tag         string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	Subaddr     string `protobuf:"bytes,4,opt,name=subaddr,proto3" json:"subaddr,omitempty"`
	Withholdcli bool   `protobuf:"varint,5,opt,name=withholdcli,proto3" json:"withholdcli,omitempty"`
	Privacy     bool   `protobuf:"varint,6,opt,name=privacy,proto3" json:"privacy,omitempty"`
	Madn        string `protobuf:"bytes,7,opt,name=madn,proto3" json:"madn,omitempty"`
	Allowcli    bool   `protobuf:"varint,8,opt,name=allowcli,proto3" json:"allowcli,omitempty"`
	Explicitcli string `protobuf:"bytes,10,opt,name=explicitcli,proto3" json:"explicitcli,omitempty"`
	Proxyorigin string `protobuf:"bytes,11,opt,name=proxyorigin,proto3" json:"proxyorigin,omitempty"`
}

func (x *AdvancedMakeCall) Reset() {
	*x = AdvancedMakeCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancedMakeCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedMakeCall) ProtoMessage() {}

func (x *AdvancedMakeCall) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedMakeCall.ProtoReflect.Descriptor instead.
func (*AdvancedMakeCall) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{20}
}

func (x *AdvancedMakeCall) GetAccountcode() string {
	if x != nil {
		return x.Accountcode
	}
	return ""
}

func (x *AdvancedMakeCall) GetAuthcode() string {
	if x != nil {
		return x.Authcode
	}
	return ""
}

func (x *AdvancedMakeCall) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *AdvancedMakeCall) GetSubaddr() string {
	if x != nil {
		return x.Subaddr
	}
	return ""
}

func (x *AdvancedMakeCall) GetWithholdcli() bool {
	if x != nil {
		return x.Withholdcli
	}
	return false
}

func (x *AdvancedMakeCall) GetPrivacy() bool {
	if x != nil {
		return x.Privacy
	}
	return false
}

func (x *AdvancedMakeCall) GetMadn() string {
	if x != nil {
		return x.Madn
	}
	return ""
}

func (x *AdvancedMakeCall) GetAllowcli() bool {
	if x != nil {
		return x.Allowcli
	}
	return false
}

func (x *AdvancedMakeCall) GetExplicitcli() string {
	if x != nil {
		return x.Explicitcli
	}
	return ""
}

func (x *AdvancedMakeCall) GetProxyorigin() string {
	if x != nil {
		return x.Proxyorigin
	}
	return ""
}

type MakeCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target   string            `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Type     int32             `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Advanced *AdvancedMakeCall `protobuf:"bytes,3,opt,name=advanced,proto3" json:"advanced,omitempty"`
}

func (x *MakeCall) Reset() {
	*x = MakeCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeCall) ProtoMessage() {}

func (x *MakeCall) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeCall.ProtoReflect.Descriptor instead.
func (*MakeCall) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{21}
}

func (x *MakeCall) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *MakeCall) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MakeCall) GetAdvanced() *AdvancedMakeCall {
	if x != nil {
		return x.Advanced
	}
	return nil
}

type UnParkCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parkid string `protobuf:"bytes,1,opt,name=parkid,proto3" json:"parkid,omitempty"`
}

func (x *UnParkCall) Reset() {
	*x = UnParkCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnParkCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnParkCall) ProtoMessage() {}

func (x *UnParkCall) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnParkCall.ProtoReflect.Descriptor instead.
func (*UnParkCall) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{22}
}

func (x *UnParkCall) GetParkid() string {
	if x != nil {
		return x.Parkid
	}
	return ""
}

type UpdateCallControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Callid          int32                    `protobuf:"varint,1,opt,name=callid,proto3" json:"callid,omitempty"`
	Referencecallid int32                    `protobuf:"varint,2,opt,name=referencecallid,proto3" json:"referencecallid,omitempty"`
	Makecall        *MakeCall                `protobuf:"bytes,3,opt,name=makecall,proto3" json:"makecall,omitempty"`
	Callfunction    *CallFunction            `protobuf:"bytes,4,opt,name=callfunction,proto3" json:"callfunction,omitempty"`
	Unparkcall      *UnParkCall              `protobuf:"bytes,6,opt,name=unparkcall,proto3" json:"unparkcall,omitempty"`
	Devicehint      UpdateCallControl_Device `protobuf:"varint,8,opt,name=devicehint,proto3,enum=main.UpdateCallControl_Device" json:"devicehint,omitempty"`
}

func (x *UpdateCallControl) Reset() {
	*x = UpdateCallControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCallControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCallControl) ProtoMessage() {}

func (x *UpdateCallControl) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCallControl.ProtoReflect.Descriptor instead.
func (*UpdateCallControl) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateCallControl) GetCallid() int32 {
	if x != nil {
		return x.Callid
	}
	return 0
}

func (x *UpdateCallControl) GetReferencecallid() int32 {
	if x != nil {
		return x.Referencecallid
	}
	return 0
}

func (x *UpdateCallControl) GetMakecall() *MakeCall {
	if x != nil {
		return x.Makecall
	}
	return nil
}

func (x *UpdateCallControl) GetCallfunction() *CallFunction {
	if x != nil {
		return x.Callfunction
	}
	return nil
}

func (x *UpdateCallControl) GetUnparkcall() *UnParkCall {
	if x != nil {
		return x.Unparkcall
	}
	return nil
}

func (x *UpdateCallControl) GetDevicehint() UpdateCallControl_Device {
	if x != nil {
		return x.Devicehint
	}
	return UpdateCallControl_UNSPECIFIED
}

type NotifyCallControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Refreshinstance int32       `protobuf:"varint,1,opt,name=refreshinstance,proto3" json:"refreshinstance,omitempty"`
	Callinfo        []*CallInfo `protobuf:"bytes,2,rep,name=callinfo,proto3" json:"callinfo,omitempty"`
	Calllost        []*CallLost `protobuf:"bytes,3,rep,name=calllost,proto3" json:"calllost,omitempty"`
}

func (x *NotifyCallControl) Reset() {
	*x = NotifyCallControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyCallControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyCallControl) ProtoMessage() {}

func (x *NotifyCallControl) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyCallControl.ProtoReflect.Descriptor instead.
func (*NotifyCallControl) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{24}
}

func (x *NotifyCallControl) GetRefreshinstance() int32 {
	if x != nil {
		return x.Refreshinstance
	}
	return 0
}

func (x *NotifyCallControl) GetCallinfo() []*CallInfo {
	if x != nil {
		return x.Callinfo
	}
	return nil
}

func (x *NotifyCallControl) GetCalllost() []*CallLost {
	if x != nil {
		return x.Calllost
	}
	return nil
}

type NotifyPresentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Presentity       string   `protobuf:"bytes,1,opt,name=presentity,proto3" json:"presentity,omitempty"`
	Lref             int32    `protobuf:"varint,2,opt,name=lref,proto3" json:"lref,omitempty"`
	Sac              bool     `protobuf:"varint,3,opt,name=sac,proto3" json:"sac,omitempty"`
	Phonestate       int32    `protobuf:"varint,4,opt,name=phonestate,proto3" json:"phonestate,omitempty"`
	Absence          *Absence `protobuf:"bytes,5,opt,name=absence,proto3" json:"absence,omitempty"`
	App              string   `protobuf:"bytes,6,opt,name=app,proto3" json:"app,omitempty"`
	Fwdu             bool     `protobuf:"varint,7,opt,name=fwdu,proto3" json:"fwdu,omitempty"`
	VmunreadMessages int32    `protobuf:"varint,8,opt,name=vmunread_messages,json=vmunreadMessages,proto3" json:"vmunread_messages,omitempty"`
}

func (x *NotifyPresentity) Reset() {
	*x = NotifyPresentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyPresentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyPresentity) ProtoMessage() {}

func (x *NotifyPresentity) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyPresentity.ProtoReflect.Descriptor instead.
func (*NotifyPresentity) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{25}
}

func (x *NotifyPresentity) GetPresentity() string {
	if x != nil {
		return x.Presentity
	}
	return ""
}

func (x *NotifyPresentity) GetLref() int32 {
	if x != nil {
		return x.Lref
	}
	return 0
}

func (x *NotifyPresentity) GetSac() bool {
	if x != nil {
		return x.Sac
	}
	return false
}

func (x *NotifyPresentity) GetPhonestate() int32 {
	if x != nil {
		return x.Phonestate
	}
	return 0
}

func (x *NotifyPresentity) GetAbsence() *Absence {
	if x != nil {
		return x.Absence
	}
	return nil
}

func (x *NotifyPresentity) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *NotifyPresentity) GetFwdu() bool {
	if x != nil {
		return x.Fwdu
	}
	return false
}

func (x *NotifyPresentity) GetVmunreadMessages() int32 {
	if x != nil {
		return x.VmunreadMessages
	}
	return 0
}

type Presentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Presentity string `protobuf:"bytes,1,opt,name=presentity,proto3" json:"presentity,omitempty"`
	Lref       int32  `protobuf:"varint,2,opt,name=lref,proto3" json:"lref,omitempty"`
}

func (x *Presentity) Reset() {
	*x = Presentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Presentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presentity) ProtoMessage() {}

func (x *Presentity) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presentity.ProtoReflect.Descriptor instead.
func (*Presentity) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{26}
}

func (x *Presentity) GetPresentity() string {
	if x != nil {
		return x.Presentity
	}
	return ""
}

func (x *Presentity) GetLref() int32 {
	if x != nil {
		return x.Lref
	}
	return 0
}

type NotifyPresence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Full  int32               `protobuf:"varint,1,opt,name=full,proto3" json:"full,omitempty"`
	Entry []*NotifyPresentity `protobuf:"bytes,2,rep,name=entry,proto3" json:"entry,omitempty"`
}

func (x *NotifyPresence) Reset() {
	*x = NotifyPresence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyPresence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyPresence) ProtoMessage() {}

func (x *NotifyPresence) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyPresence.ProtoReflect.Descriptor instead.
func (*NotifyPresence) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{27}
}

func (x *NotifyPresence) GetFull() int32 {
	if x != nil {
		return x.Full
	}
	return 0
}

func (x *NotifyPresence) GetEntry() []*NotifyPresentity {
	if x != nil {
		return x.Entry
	}
	return nil
}

type SubscribePresence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry []*Presentity `protobuf:"bytes,1,rep,name=entry,proto3" json:"entry,omitempty"`
	Flags int32         `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *SubscribePresence) Reset() {
	*x = SubscribePresence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribePresence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribePresence) ProtoMessage() {}

func (x *SubscribePresence) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribePresence.ProtoReflect.Descriptor instead.
func (*SubscribePresence) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{28}
}

func (x *SubscribePresence) GetEntry() []*Presentity {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *SubscribePresence) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type UpdatePresence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Add    []*Presentity `protobuf:"bytes,1,rep,name=add,proto3" json:"add,omitempty"`
	Remove []*Presentity `protobuf:"bytes,2,rep,name=remove,proto3" json:"remove,omitempty"`
}

func (x *UpdatePresence) Reset() {
	*x = UpdatePresence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePresence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePresence) ProtoMessage() {}

func (x *UpdatePresence) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePresence.ProtoReflect.Descriptor instead.
func (*UpdatePresence) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{29}
}

func (x *UpdatePresence) GetAdd() []*Presentity {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *UpdatePresence) GetRemove() []*Presentity {
	if x != nil {
		return x.Remove
	}
	return nil
}

type SubscribeParkServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags   int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Ccflags int32 `protobuf:"varint,2,opt,name=ccflags,proto3" json:"ccflags,omitempty"`
}

func (x *SubscribeParkServer) Reset() {
	*x = SubscribeParkServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeParkServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeParkServer) ProtoMessage() {}

func (x *SubscribeParkServer) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeParkServer.ProtoReflect.Descriptor instead.
func (*SubscribeParkServer) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{30}
}

func (x *SubscribeParkServer) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SubscribeParkServer) GetCcflags() int32 {
	if x != nil {
		return x.Ccflags
	}
	return 0
}

type SubscribeRefreshWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dummy int32 `protobuf:"varint,1,opt,name=dummy,proto3" json:"dummy,omitempty"`
}

func (x *SubscribeRefreshWrapper) Reset() {
	*x = SubscribeRefreshWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRefreshWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRefreshWrapper) ProtoMessage() {}

func (x *SubscribeRefreshWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRefreshWrapper.ProtoReflect.Descriptor instead.
func (*SubscribeRefreshWrapper) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{31}
}

func (x *SubscribeRefreshWrapper) GetDummy() int32 {
	if x != nil {
		return x.Dummy
	}
	return 0
}

type NotifyParkServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dummy int32 `protobuf:"varint,1,opt,name=dummy,proto3" json:"dummy,omitempty"`
}

func (x *NotifyParkServer) Reset() {
	*x = NotifyParkServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyParkServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyParkServer) ProtoMessage() {}

func (x *NotifyParkServer) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyParkServer.ProtoReflect.Descriptor instead.
func (*NotifyParkServer) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{32}
}

func (x *NotifyParkServer) GetDummy() int32 {
	if x != nil {
		return x.Dummy
	}
	return 0
}

type NotifyRefreshWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dummy int32 `protobuf:"varint,1,opt,name=dummy,proto3" json:"dummy,omitempty"`
}

func (x *NotifyRefreshWrapper) Reset() {
	*x = NotifyRefreshWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyRefreshWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyRefreshWrapper) ProtoMessage() {}

func (x *NotifyRefreshWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyRefreshWrapper.ProtoReflect.Descriptor instead.
func (*NotifyRefreshWrapper) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{33}
}

func (x *NotifyRefreshWrapper) GetDummy() int32 {
	if x != nil {
		return x.Dummy
	}
	return 0
}

type QueueMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extn     string `protobuf:"bytes,1,opt,name=extn,proto3" json:"extn,omitempty"`
	Disabled bool   `protobuf:"varint,2,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *QueueMember) Reset() {
	*x = QueueMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueMember) ProtoMessage() {}

func (x *QueueMember) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueMember.ProtoReflect.Descriptor instead.
func (*QueueMember) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{34}
}

func (x *QueueMember) GetExtn() string {
	if x != nil {
		return x.Extn
	}
	return ""
}

func (x *QueueMember) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

type QueueMembers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member []*QueueMember `protobuf:"bytes,1,rep,name=member,proto3" json:"member,omitempty"`
}

func (x *QueueMembers) Reset() {
	*x = QueueMembers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueMembers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueMembers) ProtoMessage() {}

func (x *QueueMembers) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueMembers.ProtoReflect.Descriptor instead.
func (*QueueMembers) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{35}
}

func (x *QueueMembers) GetMember() []*QueueMember {
	if x != nil {
		return x.Member
	}
	return nil
}

type Mailbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Newmessages   int32 `protobuf:"varint,1,opt,name=newmessages,proto3" json:"newmessages,omitempty"`
	Oldmessages   int32 `protobuf:"varint,2,opt,name=oldmessages,proto3" json:"oldmessages,omitempty"`
	Savedmessages int32 `protobuf:"varint,3,opt,name=savedmessages,proto3" json:"savedmessages,omitempty"`
}

func (x *Mailbox) Reset() {
	*x = Mailbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mailbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mailbox) ProtoMessage() {}

func (x *Mailbox) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mailbox.ProtoReflect.Descriptor instead.
func (*Mailbox) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{36}
}

func (x *Mailbox) GetNewmessages() int32 {
	if x != nil {
		return x.Newmessages
	}
	return 0
}

func (x *Mailbox) GetOldmessages() int32 {
	if x != nil {
		return x.Oldmessages
	}
	return 0
}

func (x *Mailbox) GetSavedmessages() int32 {
	if x != nil {
		return x.Savedmessages
	}
	return 0
}

type NotifyQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extn          string                  `protobuf:"bytes,2,opt,name=extn,proto3" json:"extn,omitempty"`
	Name          string                  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Katakananame  string                  `protobuf:"bytes,4,opt,name=katakananame,proto3" json:"katakananame,omitempty"`
	Email         string                  `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Ringmode      int32                   `protobuf:"varint,6,opt,name=ringmode,proto3" json:"ringmode,omitempty"`
	Noanswertime  int32                   `protobuf:"varint,7,opt,name=noanswertime,proto3" json:"noanswertime,omitempty"`
	Voicemail     bool                    `protobuf:"varint,8,opt,name=voicemail,proto3" json:"voicemail,omitempty"`
	Voicemailtime int32                   `protobuf:"varint,9,opt,name=voicemailtime,proto3" json:"voicemailtime,omitempty"`
	Servicemode   NotifyQueue_ServiceMode `protobuf:"varint,10,opt,name=servicemode,proto3,enum=main.NotifyQueue_ServiceMode" json:"servicemode,omitempty"`
	Queuemembers  *QueueMembers           `protobuf:"bytes,11,opt,name=queuemembers,proto3" json:"queuemembers,omitempty"`
	Mailbox       *Mailbox                `protobuf:"bytes,12,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
}

func (x *NotifyQueue) Reset() {
	*x = NotifyQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyQueue) ProtoMessage() {}

func (x *NotifyQueue) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyQueue.ProtoReflect.Descriptor instead.
func (*NotifyQueue) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{37}
}

func (x *NotifyQueue) GetExtn() string {
	if x != nil {
		return x.Extn
	}
	return ""
}

func (x *NotifyQueue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NotifyQueue) GetKatakananame() string {
	if x != nil {
		return x.Katakananame
	}
	return ""
}

func (x *NotifyQueue) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *NotifyQueue) GetRingmode() int32 {
	if x != nil {
		return x.Ringmode
	}
	return 0
}

func (x *NotifyQueue) GetNoanswertime() int32 {
	if x != nil {
		return x.Noanswertime
	}
	return 0
}

func (x *NotifyQueue) GetVoicemail() bool {
	if x != nil {
		return x.Voicemail
	}
	return false
}

func (x *NotifyQueue) GetVoicemailtime() int32 {
	if x != nil {
		return x.Voicemailtime
	}
	return 0
}

func (x *NotifyQueue) GetServicemode() NotifyQueue_ServiceMode {
	if x != nil {
		return x.Servicemode
	}
	return NotifyQueue_Unset
}

func (x *NotifyQueue) GetQueuemembers() *QueueMembers {
	if x != nil {
		return x.Queuemembers
	}
	return nil
}

func (x *NotifyQueue) GetMailbox() *Mailbox {
	if x != nil {
		return x.Mailbox
	}
	return nil
}

type SetVoicemail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SetVoicemail) Reset() {
	*x = SetVoicemail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVoicemail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVoicemail) ProtoMessage() {}

func (x *SetVoicemail) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVoicemail.ProtoReflect.Descriptor instead.
func (*SetVoicemail) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{38}
}

func (x *SetVoicemail) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type SetServiceMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servicemode SetServiceMode_ServiceMode `protobuf:"varint,1,opt,name=servicemode,proto3,enum=main.SetServiceMode_ServiceMode" json:"servicemode,omitempty"`
}

func (x *SetServiceMode) Reset() {
	*x = SetServiceMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetServiceMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetServiceMode) ProtoMessage() {}

func (x *SetServiceMode) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetServiceMode.ProtoReflect.Descriptor instead.
func (*SetServiceMode) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{39}
}

func (x *SetServiceMode) GetServicemode() SetServiceMode_ServiceMode {
	if x != nil {
		return x.Servicemode
	}
	return SetServiceMode_Unset
}

type UpdateQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Setservicemode *SetServiceMode `protobuf:"bytes,1,opt,name=setservicemode,proto3" json:"setservicemode,omitempty"`
	Setvoicemail   *SetVoicemail   `protobuf:"bytes,2,opt,name=setvoicemail,proto3" json:"setvoicemail,omitempty"`
	Members        *QueueMembers   `protobuf:"bytes,3,opt,name=members,proto3" json:"members,omitempty"`
	Addmember      []*QueueMember  `protobuf:"bytes,4,rep,name=addmember,proto3" json:"addmember,omitempty"`
	Deletemember   []*QueueMember  `protobuf:"bytes,5,rep,name=deletemember,proto3" json:"deletemember,omitempty"`
}

func (x *UpdateQueue) Reset() {
	*x = UpdateQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQueue) ProtoMessage() {}

func (x *UpdateQueue) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQueue.ProtoReflect.Descriptor instead.
func (*UpdateQueue) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateQueue) GetSetservicemode() *SetServiceMode {
	if x != nil {
		return x.Setservicemode
	}
	return nil
}

func (x *UpdateQueue) GetSetvoicemail() *SetVoicemail {
	if x != nil {
		return x.Setvoicemail
	}
	return nil
}

func (x *UpdateQueue) GetMembers() *QueueMembers {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *UpdateQueue) GetAddmember() []*QueueMember {
	if x != nil {
		return x.Addmember
	}
	return nil
}

func (x *UpdateQueue) GetDeletemember() []*QueueMember {
	if x != nil {
		return x.Deletemember
	}
	return nil
}

type SubscribeQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid    []byte `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Flags   int32  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Ccflags int32  `protobuf:"varint,3,opt,name=ccflags,proto3" json:"ccflags,omitempty"`
	Name    string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SubscribeQueue) Reset() {
	*x = SubscribeQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeQueue) ProtoMessage() {}

func (x *SubscribeQueue) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeQueue.ProtoReflect.Descriptor instead.
func (*SubscribeQueue) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{41}
}

func (x *SubscribeQueue) GetGuid() []byte {
	if x != nil {
		return x.Guid
	}
	return nil
}

func (x *SubscribeQueue) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SubscribeQueue) GetCcflags() int32 {
	if x != nil {
		return x.Ccflags
	}
	return 0
}

func (x *SubscribeQueue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NotifyUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extn              string   `protobuf:"bytes,2,opt,name=extn,proto3" json:"extn,omitempty"`
	Name              string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Fullname          string   `protobuf:"bytes,4,opt,name=fullname,proto3" json:"fullname,omitempty"`
	Katakananame      string   `protobuf:"bytes,5,opt,name=katakananame,proto3" json:"katakananame,omitempty"`
	Email             string   `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	Featuresavailable int32    `protobuf:"varint,7,opt,name=featuresavailable,proto3" json:"featuresavailable,omitempty"`
	Language          string   `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty"`
	Dnd               bool     `protobuf:"varint,9,opt,name=dnd,proto3" json:"dnd,omitempty"`
	Barred            bool     `protobuf:"varint,10,opt,name=barred,proto3" json:"barred,omitempty"`
	Xdirectory        bool     `protobuf:"varint,11,opt,name=xdirectory,proto3" json:"xdirectory,omitempty"`
	Voicemail         bool     `protobuf:"varint,12,opt,name=voicemail,proto3" json:"voicemail,omitempty"`
	Loggedinextn      string   `protobuf:"bytes,13,opt,name=loggedinextn,proto3" json:"loggedinextn,omitempty"`
	Extnfault         bool     `protobuf:"varint,14,opt,name=extnfault,proto3" json:"extnfault,omitempty"`
	Loggedoff         bool     `protobuf:"varint,15,opt,name=loggedoff,proto3" json:"loggedoff,omitempty"`
	Absence           *Absence `protobuf:"bytes,16,opt,name=absence,proto3" json:"absence,omitempty"`
	Mailbox           *Mailbox `protobuf:"bytes,17,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
	App               string   `protobuf:"bytes,18,opt,name=app,proto3" json:"app,omitempty"`
	Noapphandler      bool     `protobuf:"varint,19,opt,name=noapphandler,proto3" json:"noapphandler,omitempty"`
	Ec500             bool     `protobuf:"varint,20,opt,name=ec500,proto3" json:"ec500,omitempty"`
	Fwdu              bool     `protobuf:"varint,21,opt,name=fwdu,proto3" json:"fwdu,omitempty"`
	Fwdb              bool     `protobuf:"varint,22,opt,name=fwdb,proto3" json:"fwdb,omitempty"`
	Fwdna             bool     `protobuf:"varint,23,opt,name=fwdna,proto3" json:"fwdna,omitempty"`
	Fwdhg             bool     `protobuf:"varint,24,opt,name=fwdhg,proto3" json:"fwdhg,omitempty"`
	Fwdunumber        string   `protobuf:"bytes,25,opt,name=fwdunumber,proto3" json:"fwdunumber,omitempty"`
	Fwdbnumber        string   `protobuf:"bytes,26,opt,name=fwdbnumber,proto3" json:"fwdbnumber,omitempty"`
	Fwdtovm           bool     `protobuf:"varint,27,opt,name=fwdtovm,proto3" json:"fwdtovm,omitempty"`
	Offswitch         bool     `protobuf:"varint,28,opt,name=offswitch,proto3" json:"offswitch,omitempty"`
}

func (x *NotifyUser) Reset() {
	*x = NotifyUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyUser) ProtoMessage() {}

func (x *NotifyUser) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyUser.ProtoReflect.Descriptor instead.
func (*NotifyUser) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{42}
}

func (x *NotifyUser) GetExtn() string {
	if x != nil {
		return x.Extn
	}
	return ""
}

func (x *NotifyUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NotifyUser) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *NotifyUser) GetKatakananame() string {
	if x != nil {
		return x.Katakananame
	}
	return ""
}

func (x *NotifyUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *NotifyUser) GetFeaturesavailable() int32 {
	if x != nil {
		return x.Featuresavailable
	}
	return 0
}

func (x *NotifyUser) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *NotifyUser) GetDnd() bool {
	if x != nil {
		return x.Dnd
	}
	return false
}

func (x *NotifyUser) GetBarred() bool {
	if x != nil {
		return x.Barred
	}
	return false
}

func (x *NotifyUser) GetXdirectory() bool {
	if x != nil {
		return x.Xdirectory
	}
	return false
}

func (x *NotifyUser) GetVoicemail() bool {
	if x != nil {
		return x.Voicemail
	}
	return false
}

func (x *NotifyUser) GetLoggedinextn() string {
	if x != nil {
		return x.Loggedinextn
	}
	return ""
}

func (x *NotifyUser) GetExtnfault() bool {
	if x != nil {
		return x.Extnfault
	}
	return false
}

func (x *NotifyUser) GetLoggedoff() bool {
	if x != nil {
		return x.Loggedoff
	}
	return false
}

func (x *NotifyUser) GetAbsence() *Absence {
	if x != nil {
		return x.Absence
	}
	return nil
}

func (x *NotifyUser) GetMailbox() *Mailbox {
	if x != nil {
		return x.Mailbox
	}
	return nil
}

func (x *NotifyUser) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *NotifyUser) GetNoapphandler() bool {
	if x != nil {
		return x.Noapphandler
	}
	return false
}

func (x *NotifyUser) GetEc500() bool {
	if x != nil {
		return x.Ec500
	}
	return false
}

func (x *NotifyUser) GetFwdu() bool {
	if x != nil {
		return x.Fwdu
	}
	return false
}

func (x *NotifyUser) GetFwdb() bool {
	if x != nil {
		return x.Fwdb
	}
	return false
}

func (x *NotifyUser) GetFwdna() bool {
	if x != nil {
		return x.Fwdna
	}
	return false
}

func (x *NotifyUser) GetFwdhg() bool {
	if x != nil {
		return x.Fwdhg
	}
	return false
}

func (x *NotifyUser) GetFwdunumber() string {
	if x != nil {
		return x.Fwdunumber
	}
	return ""
}

func (x *NotifyUser) GetFwdbnumber() string {
	if x != nil {
		return x.Fwdbnumber
	}
	return ""
}

func (x *NotifyUser) GetFwdtovm() bool {
	if x != nil {
		return x.Fwdtovm
	}
	return false
}

func (x *NotifyUser) GetOffswitch() bool {
	if x != nil {
		return x.Offswitch
	}
	return false
}

type SubscribeUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid    []byte `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Flags   int32  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Ccflags int32  `protobuf:"varint,3,opt,name=ccflags,proto3" json:"ccflags,omitempty"`
}

func (x *SubscribeUser) Reset() {
	*x = SubscribeUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeUser) ProtoMessage() {}

func (x *SubscribeUser) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeUser.ProtoReflect.Descriptor instead.
func (*SubscribeUser) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{43}
}

func (x *SubscribeUser) GetGuid() []byte {
	if x != nil {
		return x.Guid
	}
	return nil
}

func (x *SubscribeUser) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SubscribeUser) GetCcflags() int32 {
	if x != nil {
		return x.Ccflags
	}
	return 0
}

type UpdateUserSAC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Set int32 `protobuf:"varint,1,opt,name=set,proto3" json:"set,omitempty"`
}

func (x *UpdateUserSAC) Reset() {
	*x = UpdateUserSAC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserSAC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserSAC) ProtoMessage() {}

func (x *UpdateUserSAC) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserSAC.ProtoReflect.Descriptor instead.
func (*UpdateUserSAC) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{44}
}

func (x *UpdateUserSAC) GetSet() int32 {
	if x != nil {
		return x.Set
	}
	return 0
}

type UpdateUserEC500 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Set int32 `protobuf:"varint,1,opt,name=set,proto3" json:"set,omitempty"`
}

func (x *UpdateUserEC500) Reset() {
	*x = UpdateUserEC500{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserEC500) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserEC500) ProtoMessage() {}

func (x *UpdateUserEC500) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserEC500.ProtoReflect.Descriptor instead.
func (*UpdateUserEC500) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{45}
}

func (x *UpdateUserEC500) GetSet() int32 {
	if x != nil {
		return x.Set
	}
	return 0
}

type UpdateUserAbsence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Set     int32    `protobuf:"varint,1,opt,name=set,proto3" json:"set,omitempty"`
	Absence *Absence `protobuf:"bytes,2,opt,name=absence,proto3" json:"absence,omitempty"`
}

func (x *UpdateUserAbsence) Reset() {
	*x = UpdateUserAbsence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserAbsence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserAbsence) ProtoMessage() {}

func (x *UpdateUserAbsence) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserAbsence.ProtoReflect.Descriptor instead.
func (*UpdateUserAbsence) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{46}
}

func (x *UpdateUserAbsence) GetSet() int32 {
	if x != nil {
		return x.Set
	}
	return 0
}

func (x *UpdateUserAbsence) GetAbsence() *Absence {
	if x != nil {
		return x.Absence
	}
	return nil
}

type TeleworkerConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number         string `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	Holdlineopen   bool   `protobuf:"varint,2,opt,name=holdlineopen,proto3" json:"holdlineopen,omitempty"`
	Testconnection int32  `protobuf:"varint,3,opt,name=testconnection,proto3" json:"testconnection,omitempty"`
}

func (x *TeleworkerConnection) Reset() {
	*x = TeleworkerConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeleworkerConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeleworkerConnection) ProtoMessage() {}

func (x *TeleworkerConnection) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeleworkerConnection.ProtoReflect.Descriptor instead.
func (*TeleworkerConnection) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{47}
}

func (x *TeleworkerConnection) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *TeleworkerConnection) GetHoldlineopen() bool {
	if x != nil {
		return x.Holdlineopen
	}
	return false
}

func (x *TeleworkerConnection) GetTestconnection() int32 {
	if x != nil {
		return x.Testconnection
	}
	return 0
}

type UpdateUserLoginExtn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extn                 string                `protobuf:"bytes,1,opt,name=extn,proto3" json:"extn,omitempty"`
	Password             string                `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Teleworkerconnection *TeleworkerConnection `protobuf:"bytes,3,opt,name=teleworkerconnection,proto3" json:"teleworkerconnection,omitempty"`
}

func (x *UpdateUserLoginExtn) Reset() {
	*x = UpdateUserLoginExtn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserLoginExtn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserLoginExtn) ProtoMessage() {}

func (x *UpdateUserLoginExtn) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserLoginExtn.ProtoReflect.Descriptor instead.
func (*UpdateUserLoginExtn) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{48}
}

func (x *UpdateUserLoginExtn) GetExtn() string {
	if x != nil {
		return x.Extn
	}
	return ""
}

func (x *UpdateUserLoginExtn) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UpdateUserLoginExtn) GetTeleworkerconnection() *TeleworkerConnection {
	if x != nil {
		return x.Teleworkerconnection
	}
	return nil
}

type UpdateUserApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Makelive bool   `protobuf:"varint,2,opt,name=makelive,proto3" json:"makelive,omitempty"`
	Makedead bool   `protobuf:"varint,3,opt,name=makedead,proto3" json:"makedead,omitempty"`
}

func (x *UpdateUserApp) Reset() {
	*x = UpdateUserApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserApp) ProtoMessage() {}

func (x *UpdateUserApp) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserApp.ProtoReflect.Descriptor instead.
func (*UpdateUserApp) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{49}
}

func (x *UpdateUserApp) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *UpdateUserApp) GetMakelive() bool {
	if x != nil {
		return x.Makelive
	}
	return false
}

func (x *UpdateUserApp) GetMakedead() bool {
	if x != nil {
		return x.Makedead
	}
	return false
}

type UpdateUserFwdU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Set        bool   `protobuf:"varint,1,opt,name=set,proto3" json:"set,omitempty"`
	FwduNumber string `protobuf:"bytes,2,opt,name=fwdu_number,json=fwduNumber,proto3" json:"fwdu_number,omitempty"`
	Fwdtovm    bool   `protobuf:"varint,3,opt,name=fwdtovm,proto3" json:"fwdtovm,omitempty"`
}

func (x *UpdateUserFwdU) Reset() {
	*x = UpdateUserFwdU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserFwdU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserFwdU) ProtoMessage() {}

func (x *UpdateUserFwdU) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserFwdU.ProtoReflect.Descriptor instead.
func (*UpdateUserFwdU) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{50}
}

func (x *UpdateUserFwdU) GetSet() bool {
	if x != nil {
		return x.Set
	}
	return false
}

func (x *UpdateUserFwdU) GetFwduNumber() string {
	if x != nil {
		return x.FwduNumber
	}
	return ""
}

func (x *UpdateUserFwdU) GetFwdtovm() bool {
	if x != nil {
		return x.Fwdtovm
	}
	return false
}

type UpdateUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sac           *UpdateUserSAC       `protobuf:"bytes,1,opt,name=sac,proto3" json:"sac,omitempty"`
	Absence       *UpdateUserAbsence   `protobuf:"bytes,2,opt,name=absence,proto3" json:"absence,omitempty"`
	Ec500         *UpdateUserEC500     `protobuf:"bytes,3,opt,name=ec500,proto3" json:"ec500,omitempty"`
	Shortcodedata []*ShortCodeData     `protobuf:"bytes,4,rep,name=shortcodedata,proto3" json:"shortcodedata,omitempty"`
	Loginextn     *UpdateUserLoginExtn `protobuf:"bytes,7,opt,name=loginextn,proto3" json:"loginextn,omitempty"`
	App           *UpdateUserApp       `protobuf:"bytes,8,opt,name=app,proto3" json:"app,omitempty"`
	Fwdu          *UpdateUserFwdU      `protobuf:"bytes,9,opt,name=fwdu,proto3" json:"fwdu,omitempty"`
}

func (x *UpdateUser) Reset() {
	*x = UpdateUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUser) ProtoMessage() {}

func (x *UpdateUser) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUser.ProtoReflect.Descriptor instead.
func (*UpdateUser) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{51}
}

func (x *UpdateUser) GetSac() *UpdateUserSAC {
	if x != nil {
		return x.Sac
	}
	return nil
}

func (x *UpdateUser) GetAbsence() *UpdateUserAbsence {
	if x != nil {
		return x.Absence
	}
	return nil
}

func (x *UpdateUser) GetEc500() *UpdateUserEC500 {
	if x != nil {
		return x.Ec500
	}
	return nil
}

func (x *UpdateUser) GetShortcodedata() []*ShortCodeData {
	if x != nil {
		return x.Shortcodedata
	}
	return nil
}

func (x *UpdateUser) GetLoginextn() *UpdateUserLoginExtn {
	if x != nil {
		return x.Loginextn
	}
	return nil
}

func (x *UpdateUser) GetApp() *UpdateUserApp {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *UpdateUser) GetFwdu() *UpdateUserFwdU {
	if x != nil {
		return x.Fwdu
	}
	return nil
}

type SubscribeLines struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *SubscribeLines) Reset() {
	*x = SubscribeLines{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeLines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeLines) ProtoMessage() {}

func (x *SubscribeLines) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeLines.ProtoReflect.Descriptor instead.
func (*SubscribeLines) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{52}
}

func (x *SubscribeLines) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type LinesUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid []byte `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Extn string `protobuf:"bytes,2,opt,name=extn,proto3" json:"extn,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LinesUser) Reset() {
	*x = LinesUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinesUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinesUser) ProtoMessage() {}

func (x *LinesUser) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinesUser.ProtoReflect.Descriptor instead.
func (*LinesUser) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{53}
}

func (x *LinesUser) GetGuid() []byte {
	if x != nil {
		return x.Guid
	}
	return nil
}

func (x *LinesUser) GetExtn() string {
	if x != nil {
		return x.Extn
	}
	return ""
}

func (x *LinesUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LinesQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid []byte `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Extn string `protobuf:"bytes,2,opt,name=extn,proto3" json:"extn,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LinesQueue) Reset() {
	*x = LinesQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinesQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinesQueue) ProtoMessage() {}

func (x *LinesQueue) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinesQueue.ProtoReflect.Descriptor instead.
func (*LinesQueue) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{54}
}

func (x *LinesQueue) GetGuid() []byte {
	if x != nil {
		return x.Guid
	}
	return nil
}

func (x *LinesQueue) GetExtn() string {
	if x != nil {
		return x.Extn
	}
	return ""
}

func (x *LinesQueue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NotifyLines struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags       int32         `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Adduser     []*LinesUser  `protobuf:"bytes,2,rep,name=adduser,proto3" json:"adduser,omitempty"`
	Addqueue    []*LinesQueue `protobuf:"bytes,3,rep,name=addqueue,proto3" json:"addqueue,omitempty"`
	Deleteuser  []*LinesUser  `protobuf:"bytes,4,rep,name=deleteuser,proto3" json:"deleteuser,omitempty"`
	Deletequeue []*LinesQueue `protobuf:"bytes,5,rep,name=deletequeue,proto3" json:"deletequeue,omitempty"`
	Changeuser  []*LinesUser  `protobuf:"bytes,6,rep,name=changeuser,proto3" json:"changeuser,omitempty"`
	Changequeue []*LinesQueue `protobuf:"bytes,7,rep,name=changequeue,proto3" json:"changequeue,omitempty"`
}

func (x *NotifyLines) Reset() {
	*x = NotifyLines{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyLines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyLines) ProtoMessage() {}

func (x *NotifyLines) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyLines.ProtoReflect.Descriptor instead.
func (*NotifyLines) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{55}
}

func (x *NotifyLines) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *NotifyLines) GetAdduser() []*LinesUser {
	if x != nil {
		return x.Adduser
	}
	return nil
}

func (x *NotifyLines) GetAddqueue() []*LinesQueue {
	if x != nil {
		return x.Addqueue
	}
	return nil
}

func (x *NotifyLines) GetDeleteuser() []*LinesUser {
	if x != nil {
		return x.Deleteuser
	}
	return nil
}

func (x *NotifyLines) GetDeletequeue() []*LinesQueue {
	if x != nil {
		return x.Deletequeue
	}
	return nil
}

func (x *NotifyLines) GetChangeuser() []*LinesUser {
	if x != nil {
		return x.Changeuser
	}
	return nil
}

func (x *NotifyLines) GetChangequeue() []*LinesQueue {
	if x != nil {
		return x.Changequeue
	}
	return nil
}

type Notify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscribeId int32  `protobuf:"varint,1,opt,name=subscribe_id,json=subscribeId,proto3" json:"subscribe_id,omitempty"`
	NotifyId    int32  `protobuf:"varint,2,opt,name=notify_id,json=notifyId,proto3" json:"notify_id,omitempty"`
	Label       string `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	// Types that are assignable to Payload:
	//	*Notify_Presence
	//	*Notify_Callcontrol
	//	*Notify_Lines
	//	*Notify_User
	//	*Notify_Queue
	//	*Notify_Parkserver
	//	*Notify_Refreshwrapper
	Payload isNotify_Payload `protobuf_oneof:"payload"`
}

func (x *Notify) Reset() {
	*x = Notify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notify) ProtoMessage() {}

func (x *Notify) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notify.ProtoReflect.Descriptor instead.
func (*Notify) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{56}
}

func (x *Notify) GetSubscribeId() int32 {
	if x != nil {
		return x.SubscribeId
	}
	return 0
}

func (x *Notify) GetNotifyId() int32 {
	if x != nil {
		return x.NotifyId
	}
	return 0
}

func (x *Notify) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (m *Notify) GetPayload() isNotify_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Notify) GetPresence() *NotifyPresence {
	if x, ok := x.GetPayload().(*Notify_Presence); ok {
		return x.Presence
	}
	return nil
}

func (x *Notify) GetCallcontrol() *NotifyCallControl {
	if x, ok := x.GetPayload().(*Notify_Callcontrol); ok {
		return x.Callcontrol
	}
	return nil
}

func (x *Notify) GetLines() *NotifyLines {
	if x, ok := x.GetPayload().(*Notify_Lines); ok {
		return x.Lines
	}
	return nil
}

func (x *Notify) GetUser() *NotifyUser {
	if x, ok := x.GetPayload().(*Notify_User); ok {
		return x.User
	}
	return nil
}

func (x *Notify) GetQueue() *NotifyQueue {
	if x, ok := x.GetPayload().(*Notify_Queue); ok {
		return x.Queue
	}
	return nil
}

func (x *Notify) GetParkserver() *NotifyParkServer {
	if x, ok := x.GetPayload().(*Notify_Parkserver); ok {
		return x.Parkserver
	}
	return nil
}

func (x *Notify) GetRefreshwrapper() *NotifyRefreshWrapper {
	if x, ok := x.GetPayload().(*Notify_Refreshwrapper); ok {
		return x.Refreshwrapper
	}
	return nil
}

type isNotify_Payload interface {
	isNotify_Payload()
}

type Notify_Presence struct {
	Presence *NotifyPresence `protobuf:"bytes,10,opt,name=presence,proto3,oneof"`
}

type Notify_Callcontrol struct {
	Callcontrol *NotifyCallControl `protobuf:"bytes,14,opt,name=callcontrol,proto3,oneof"`
}

type Notify_Lines struct {
	Lines *NotifyLines `protobuf:"bytes,40,opt,name=lines,proto3,oneof"`
}

type Notify_User struct {
	User *NotifyUser `protobuf:"bytes,41,opt,name=user,proto3,oneof"`
}

type Notify_Queue struct {
	Queue *NotifyQueue `protobuf:"bytes,42,opt,name=queue,proto3,oneof"`
}

type Notify_Parkserver struct {
	Parkserver *NotifyParkServer `protobuf:"bytes,43,opt,name=parkserver,proto3,oneof"`
}

type Notify_Refreshwrapper struct {
	Refreshwrapper *NotifyRefreshWrapper `protobuf:"bytes,45,opt,name=refreshwrapper,proto3,oneof"`
}

func (*Notify_Presence) isNotify_Payload() {}

func (*Notify_Callcontrol) isNotify_Payload() {}

func (*Notify_Lines) isNotify_Payload() {}

func (*Notify_User) isNotify_Payload() {}

func (*Notify_Queue) isNotify_Payload() {}

func (*Notify_Parkserver) isNotify_Payload() {}

func (*Notify_Refreshwrapper) isNotify_Payload() {}

type NotifyAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscribeId int32 `protobuf:"varint,1,opt,name=subscribe_id,json=subscribeId,proto3" json:"subscribe_id,omitempty"`
	NotifyId    int32 `protobuf:"varint,2,opt,name=notify_id,json=notifyId,proto3" json:"notify_id,omitempty"`
}

func (x *NotifyAck) Reset() {
	*x = NotifyAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyAck) ProtoMessage() {}

func (x *NotifyAck) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyAck.ProtoReflect.Descriptor instead.
func (*NotifyAck) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{57}
}

func (x *NotifyAck) GetSubscribeId() int32 {
	if x != nil {
		return x.SubscribeId
	}
	return 0
}

func (x *NotifyAck) GetNotifyId() int32 {
	if x != nil {
		return x.NotifyId
	}
	return 0
}

type Subscribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requestid   int32  `protobuf:"varint,1,opt,name=requestid,proto3" json:"requestid,omitempty"`
	SubscribeId int32  `protobuf:"varint,2,opt,name=subscribe_id,json=subscribeId,proto3" json:"subscribe_id,omitempty"`
	Timeout     int32  `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Label       string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	// Types that are assignable to Payload:
	//	*Subscribe_Presence
	//	*Subscribe_Lines
	//	*Subscribe_User
	//	*Subscribe_Queue
	//	*Subscribe_Parkserver
	//	*Subscribe_Refreshwrapper
	Payload isSubscribe_Payload `protobuf_oneof:"payload"`
}

func (x *Subscribe) Reset() {
	*x = Subscribe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscribe) ProtoMessage() {}

func (x *Subscribe) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscribe.ProtoReflect.Descriptor instead.
func (*Subscribe) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{58}
}

func (x *Subscribe) GetRequestid() int32 {
	if x != nil {
		return x.Requestid
	}
	return 0
}

func (x *Subscribe) GetSubscribeId() int32 {
	if x != nil {
		return x.SubscribeId
	}
	return 0
}

func (x *Subscribe) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Subscribe) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (m *Subscribe) GetPayload() isSubscribe_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Subscribe) GetPresence() *SubscribePresence {
	if x, ok := x.GetPayload().(*Subscribe_Presence); ok {
		return x.Presence
	}
	return nil
}

func (x *Subscribe) GetLines() *SubscribeLines {
	if x, ok := x.GetPayload().(*Subscribe_Lines); ok {
		return x.Lines
	}
	return nil
}

func (x *Subscribe) GetUser() *SubscribeUser {
	if x, ok := x.GetPayload().(*Subscribe_User); ok {
		return x.User
	}
	return nil
}

func (x *Subscribe) GetQueue() *SubscribeQueue {
	if x, ok := x.GetPayload().(*Subscribe_Queue); ok {
		return x.Queue
	}
	return nil
}

func (x *Subscribe) GetParkserver() *SubscribeParkServer {
	if x, ok := x.GetPayload().(*Subscribe_Parkserver); ok {
		return x.Parkserver
	}
	return nil
}

func (x *Subscribe) GetRefreshwrapper() *SubscribeRefreshWrapper {
	if x, ok := x.GetPayload().(*Subscribe_Refreshwrapper); ok {
		return x.Refreshwrapper
	}
	return nil
}

type isSubscribe_Payload interface {
	isSubscribe_Payload()
}

type Subscribe_Presence struct {
	Presence *SubscribePresence `protobuf:"bytes,10,opt,name=presence,proto3,oneof"`
}

type Subscribe_Lines struct {
	Lines *SubscribeLines `protobuf:"bytes,40,opt,name=lines,proto3,oneof"`
}

type Subscribe_User struct {
	User *SubscribeUser `protobuf:"bytes,41,opt,name=user,proto3,oneof"`
}

type Subscribe_Queue struct {
	Queue *SubscribeQueue `protobuf:"bytes,42,opt,name=queue,proto3,oneof"`
}

type Subscribe_Parkserver struct {
	Parkserver *SubscribeParkServer `protobuf:"bytes,43,opt,name=parkserver,proto3,oneof"`
}

type Subscribe_Refreshwrapper struct {
	Refreshwrapper *SubscribeRefreshWrapper `protobuf:"bytes,45,opt,name=refreshwrapper,proto3,oneof"`
}

func (*Subscribe_Presence) isSubscribe_Payload() {}

func (*Subscribe_Lines) isSubscribe_Payload() {}

func (*Subscribe_User) isSubscribe_Payload() {}

func (*Subscribe_Queue) isSubscribe_Payload() {}

func (*Subscribe_Parkserver) isSubscribe_Payload() {}

func (*Subscribe_Refreshwrapper) isSubscribe_Payload() {}

type GetFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmdinst int32  `protobuf:"varint,1,opt,name=cmdinst,proto3" json:"cmdinst,omitempty"`
	Fname   string `protobuf:"bytes,2,opt,name=fname,proto3" json:"fname,omitempty"`
}

func (x *GetFile) Reset() {
	*x = GetFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFile) ProtoMessage() {}

func (x *GetFile) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFile.ProtoReflect.Descriptor instead.
func (*GetFile) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{59}
}

func (x *GetFile) GetCmdinst() int32 {
	if x != nil {
		return x.Cmdinst
	}
	return 0
}

func (x *GetFile) GetFname() string {
	if x != nil {
		return x.Fname
	}
	return ""
}

type GetFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmdinst int32  `protobuf:"varint,1,opt,name=cmdinst,proto3" json:"cmdinst,omitempty"`
	Fname   string `protobuf:"bytes,2,opt,name=fname,proto3" json:"fname,omitempty"`
	Result  int32  `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Payload []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetFileResponse) Reset() {
	*x = GetFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileResponse) ProtoMessage() {}

func (x *GetFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileResponse.ProtoReflect.Descriptor instead.
func (*GetFileResponse) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{60}
}

func (x *GetFileResponse) GetCmdinst() int32 {
	if x != nil {
		return x.Cmdinst
	}
	return 0
}

func (x *GetFileResponse) GetFname() string {
	if x != nil {
		return x.Fname
	}
	return ""
}

func (x *GetFileResponse) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GetFileResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type GeneralCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requestid int32 `protobuf:"varint,1,opt,name=requestid,proto3" json:"requestid,omitempty"`
	// Types that are assignable to Payload:
	//	*GeneralCmd_Getfile
	Payload isGeneralCmd_Payload `protobuf_oneof:"payload"`
}

func (x *GeneralCmd) Reset() {
	*x = GeneralCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralCmd) ProtoMessage() {}

func (x *GeneralCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralCmd.ProtoReflect.Descriptor instead.
func (*GeneralCmd) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{61}
}

func (x *GeneralCmd) GetRequestid() int32 {
	if x != nil {
		return x.Requestid
	}
	return 0
}

func (m *GeneralCmd) GetPayload() isGeneralCmd_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *GeneralCmd) GetGetfile() *GetFile {
	if x, ok := x.GetPayload().(*GeneralCmd_Getfile); ok {
		return x.Getfile
	}
	return nil
}

type isGeneralCmd_Payload interface {
	isGeneralCmd_Payload()
}

type GeneralCmd_Getfile struct {
	Getfile *GetFile `protobuf:"bytes,6,opt,name=getfile,proto3,oneof"`
}

func (*GeneralCmd_Getfile) isGeneralCmd_Payload() {}

type GeneralData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responseid int32 `protobuf:"varint,1,opt,name=responseid,proto3" json:"responseid,omitempty"`
	// Types that are assignable to Payload:
	//	*GeneralData_Getfile
	Payload isGeneralData_Payload `protobuf_oneof:"payload"`
}

func (x *GeneralData) Reset() {
	*x = GeneralData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralData) ProtoMessage() {}

func (x *GeneralData) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralData.ProtoReflect.Descriptor instead.
func (*GeneralData) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{62}
}

func (x *GeneralData) GetResponseid() int32 {
	if x != nil {
		return x.Responseid
	}
	return 0
}

func (m *GeneralData) GetPayload() isGeneralData_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *GeneralData) GetGetfile() *GetFileResponse {
	if x, ok := x.GetPayload().(*GeneralData_Getfile); ok {
		return x.Getfile
	}
	return nil
}

type isGeneralData_Payload interface {
	isGeneralData_Payload()
}

type GeneralData_Getfile struct {
	Getfile *GetFileResponse `protobuf:"bytes,6,opt,name=getfile,proto3,oneof"`
}

func (*GeneralData_Getfile) isGeneralData_Payload() {}

type SubscribeEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requestid   int32  `protobuf:"varint,1,opt,name=requestid,proto3" json:"requestid,omitempty"`
	SubscribeId int32  `protobuf:"varint,2,opt,name=subscribe_id,json=subscribeId,proto3" json:"subscribe_id,omitempty"`
	Reason      string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *SubscribeEnd) Reset() {
	*x = SubscribeEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeEnd) ProtoMessage() {}

func (x *SubscribeEnd) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeEnd.ProtoReflect.Descriptor instead.
func (*SubscribeEnd) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{63}
}

func (x *SubscribeEnd) GetRequestid() int32 {
	if x != nil {
		return x.Requestid
	}
	return 0
}

func (x *SubscribeEnd) GetSubscribeId() int32 {
	if x != nil {
		return x.SubscribeId
	}
	return 0
}

func (x *SubscribeEnd) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type SubscribeTerminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscribeId int32  `protobuf:"varint,1,opt,name=subscribe_id,json=subscribeId,proto3" json:"subscribe_id,omitempty"`
	Reason      string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *SubscribeTerminated) Reset() {
	*x = SubscribeTerminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTerminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTerminated) ProtoMessage() {}

func (x *SubscribeTerminated) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTerminated.ProtoReflect.Descriptor instead.
func (*SubscribeTerminated) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{64}
}

func (x *SubscribeTerminated) GetSubscribeId() int32 {
	if x != nil {
		return x.SubscribeId
	}
	return 0
}

func (x *SubscribeTerminated) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type SubscribeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requestid   int32 `protobuf:"varint,1,opt,name=requestid,proto3" json:"requestid,omitempty"`
	SubscribeId int32 `protobuf:"varint,2,opt,name=subscribe_id,json=subscribeId,proto3" json:"subscribe_id,omitempty"`
	// Types that are assignable to Payload:
	//	*SubscribeCmd_Timeout
	//	*SubscribeCmd_Presence
	//	*SubscribeCmd_Callcontrol
	//	*SubscribeCmd_User
	//	*SubscribeCmd_Queue
	Payload isSubscribeCmd_Payload `protobuf_oneof:"payload"`
}

func (x *SubscribeCmd) Reset() {
	*x = SubscribeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeCmd) ProtoMessage() {}

func (x *SubscribeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeCmd.ProtoReflect.Descriptor instead.
func (*SubscribeCmd) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{65}
}

func (x *SubscribeCmd) GetRequestid() int32 {
	if x != nil {
		return x.Requestid
	}
	return 0
}

func (x *SubscribeCmd) GetSubscribeId() int32 {
	if x != nil {
		return x.SubscribeId
	}
	return 0
}

func (m *SubscribeCmd) GetPayload() isSubscribeCmd_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *SubscribeCmd) GetTimeout() int32 {
	if x, ok := x.GetPayload().(*SubscribeCmd_Timeout); ok {
		return x.Timeout
	}
	return 0
}

func (x *SubscribeCmd) GetPresence() *UpdatePresence {
	if x, ok := x.GetPayload().(*SubscribeCmd_Presence); ok {
		return x.Presence
	}
	return nil
}

func (x *SubscribeCmd) GetCallcontrol() *UpdateCallControl {
	if x, ok := x.GetPayload().(*SubscribeCmd_Callcontrol); ok {
		return x.Callcontrol
	}
	return nil
}

func (x *SubscribeCmd) GetUser() *UpdateUser {
	if x, ok := x.GetPayload().(*SubscribeCmd_User); ok {
		return x.User
	}
	return nil
}

func (x *SubscribeCmd) GetQueue() *UpdateQueue {
	if x, ok := x.GetPayload().(*SubscribeCmd_Queue); ok {
		return x.Queue
	}
	return nil
}

type isSubscribeCmd_Payload interface {
	isSubscribeCmd_Payload()
}

type SubscribeCmd_Timeout struct {
	Timeout int32 `protobuf:"varint,3,opt,name=timeout,proto3,oneof"`
}

type SubscribeCmd_Presence struct {
	Presence *UpdatePresence `protobuf:"bytes,10,opt,name=presence,proto3,oneof"`
}

type SubscribeCmd_Callcontrol struct {
	Callcontrol *UpdateCallControl `protobuf:"bytes,14,opt,name=callcontrol,proto3,oneof"`
}

type SubscribeCmd_User struct {
	User *UpdateUser `protobuf:"bytes,41,opt,name=user,proto3,oneof"`
}

type SubscribeCmd_Queue struct {
	Queue *UpdateQueue `protobuf:"bytes,42,opt,name=queue,proto3,oneof"`
}

func (*SubscribeCmd_Timeout) isSubscribeCmd_Payload() {}

func (*SubscribeCmd_Presence) isSubscribeCmd_Payload() {}

func (*SubscribeCmd_Callcontrol) isSubscribeCmd_Payload() {}

func (*SubscribeCmd_User) isSubscribeCmd_Payload() {}

func (*SubscribeCmd_Queue) isSubscribeCmd_Payload() {}

type RequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requestid  int32  `protobuf:"varint,1,opt,name=requestid,proto3" json:"requestid,omitempty"`
	Result     int32  `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	Additional string `protobuf:"bytes,3,opt,name=additional,proto3" json:"additional,omitempty"`
}

func (x *RequestResponse) Reset() {
	*x = RequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestResponse) ProtoMessage() {}

func (x *RequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestResponse.ProtoReflect.Descriptor instead.
func (*RequestResponse) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{66}
}

func (x *RequestResponse) GetRequestid() int32 {
	if x != nil {
		return x.Requestid
	}
	return 0
}

func (x *RequestResponse) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *RequestResponse) GetAdditional() string {
	if x != nil {
		return x.Additional
	}
	return ""
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*Message_Response
	//	*Message_Generalcmd
	//	*Message_Subscribe
	//	*Message_Subscribecmd
	//	*Message_Subscribeend
	//	*Message_Subscribeterminated
	//	*Message_Generaldata
	//	*Message_Notify
	//	*Message_Notifyack
	Payload isMessage_Payload `protobuf_oneof:"payload"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipo_mtcti3_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_ipo_mtcti3_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_ipo_mtcti3_proto_rawDescGZIP(), []int{67}
}

func (m *Message) GetPayload() isMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Message) GetResponse() *RequestResponse {
	if x, ok := x.GetPayload().(*Message_Response); ok {
		return x.Response
	}
	return nil
}

func (x *Message) GetGeneralcmd() *GeneralCmd {
	if x, ok := x.GetPayload().(*Message_Generalcmd); ok {
		return x.Generalcmd
	}
	return nil
}

func (x *Message) GetSubscribe() *Subscribe {
	if x, ok := x.GetPayload().(*Message_Subscribe); ok {
		return x.Subscribe
	}
	return nil
}

func (x *Message) GetSubscribecmd() *SubscribeCmd {
	if x, ok := x.GetPayload().(*Message_Subscribecmd); ok {
		return x.Subscribecmd
	}
	return nil
}

func (x *Message) GetSubscribeend() *SubscribeEnd {
	if x, ok := x.GetPayload().(*Message_Subscribeend); ok {
		return x.Subscribeend
	}
	return nil
}

func (x *Message) GetSubscribeterminated() *SubscribeTerminated {
	if x, ok := x.GetPayload().(*Message_Subscribeterminated); ok {
		return x.Subscribeterminated
	}
	return nil
}

func (x *Message) GetGeneraldata() *GeneralData {
	if x, ok := x.GetPayload().(*Message_Generaldata); ok {
		return x.Generaldata
	}
	return nil
}

func (x *Message) GetNotify() *Notify {
	if x, ok := x.GetPayload().(*Message_Notify); ok {
		return x.Notify
	}
	return nil
}

func (x *Message) GetNotifyack() *NotifyAck {
	if x, ok := x.GetPayload().(*Message_Notifyack); ok {
		return x.Notifyack
	}
	return nil
}

type isMessage_Payload interface {
	isMessage_Payload()
}

type Message_Response struct {
	Response *RequestResponse `protobuf:"bytes,1,opt,name=response,proto3,oneof"`
}

type Message_Generalcmd struct {
	Generalcmd *GeneralCmd `protobuf:"bytes,2,opt,name=generalcmd,proto3,oneof"`
}

type Message_Subscribe struct {
	Subscribe *Subscribe `protobuf:"bytes,3,opt,name=subscribe,proto3,oneof"`
}

type Message_Subscribecmd struct {
	Subscribecmd *SubscribeCmd `protobuf:"bytes,4,opt,name=subscribecmd,proto3,oneof"`
}

type Message_Subscribeend struct {
	Subscribeend *SubscribeEnd `protobuf:"bytes,5,opt,name=subscribeend,proto3,oneof"`
}

type Message_Subscribeterminated struct {
	Subscribeterminated *SubscribeTerminated `protobuf:"bytes,6,opt,name=subscribeterminated,proto3,oneof"`
}

type Message_Generaldata struct {
	Generaldata *GeneralData `protobuf:"bytes,7,opt,name=generaldata,proto3,oneof"`
}

type Message_Notify struct {
	Notify *Notify `protobuf:"bytes,8,opt,name=notify,proto3,oneof"`
}

type Message_Notifyack struct {
	Notifyack *NotifyAck `protobuf:"bytes,9,opt,name=notifyack,proto3,oneof"`
}

func (*Message_Response) isMessage_Payload() {}

func (*Message_Generalcmd) isMessage_Payload() {}

func (*Message_Subscribe) isMessage_Payload() {}

func (*Message_Subscribecmd) isMessage_Payload() {}

func (*Message_Subscribeend) isMessage_Payload() {}

func (*Message_Subscribeterminated) isMessage_Payload() {}

func (*Message_Generaldata) isMessage_Payload() {}

func (*Message_Notify) isMessage_Payload() {}

func (*Message_Notifyack) isMessage_Payload() {}

var File_ipo_mtcti3_proto protoreflect.FileDescriptor

var file_ipo_mtcti3_proto_rawDesc = []byte{
	0x0a, 0x10, 0x69, 0x70, 0x6f, 0x5f, 0x6d, 0x74, 0x63, 0x74, 0x69, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xd3, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6e, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68,
	0x68, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68,
	0x68, 0x65, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x88,
	0x02, 0x0a, 0x08, 0x44, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64, 0x63, 0x6c, 0x69, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64, 0x63, 0x6c,
	0x69, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x69, 0x64, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x69, 0x64, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x61, 0x64, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x64,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x63, 0x6c, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x63, 0x6c, 0x69, 0x22, 0xc5, 0x01, 0x0a, 0x09, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x6b,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x72, 0x75, 0x6e,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64,
	0x69, 0x64, 0x22, 0x6d, 0x0a, 0x09, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x4e, 0x6f, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x54, 0x72, 0x75, 0x6e, 0x6b, 0x53, 0x49, 0x50, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x49, 0x53, 0x44, 0x4e, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x48, 0x33, 0x32, 0x33, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x72, 0x75, 0x6e,
	0x6b, 0x54, 0x31, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x52, 0x32,
	0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x41, 0x6c, 0x6f, 0x67, 0x10,
	0x06, 0x22, 0xa1, 0x01, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x67, 0x63, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x22,
	0x37, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x2f, 0x0a, 0x07, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x2f, 0x0a, 0x0b, 0x50, 0x49, 0x6e,
	0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x69, 0x6e, 0x74,
	0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70,
	0x69, 0x6e, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x73, 0x22, 0x1a, 0x0a, 0x04, 0x55, 0x43,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x75, 0x63, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x22, 0x2d, 0x0a, 0x07, 0x41, 0x62,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x22, 0xbb, 0x07, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x72,
	0x65, 0x66, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x68, 0x65, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x68, 0x65, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x6d, 0x75, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x63,
	0x61, 0x75, 0x73, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x0b,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x63, 0x61, 0x75, 0x73, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x41, 0x4c, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x41, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x49, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x49, 0x4e, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x49, 0x4e, 0x47,
	0x42, 0x41, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x48, 0x4f, 0x4c, 0x44, 0x10,
	0x07, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x4e, 0x48, 0x4f, 0x4c, 0x44, 0x50, 0x45, 0x4e, 0x44, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x4e, 0x48,
	0x4f, 0x4c, 0x44, 0x50, 0x45, 0x4e, 0x44, 0x43, 0x4f, 0x4e, 0x46, 0x10, 0x09, 0x12, 0x10, 0x0a,
	0x0c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12,
	0x08, 0x0a, 0x04, 0x42, 0x55, 0x53, 0x59, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47,
	0x46, 0x4f, 0x52, 0x41, 0x43, 0x43, 0x54, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x41, 0x49,
	0x54, 0x49, 0x4e, 0x47, 0x46, 0x4f, 0x52, 0x41, 0x55, 0x54, 0x48, 0x10, 0x0e, 0x12, 0x12, 0x0a,
	0x0e, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x46, 0x4f, 0x52, 0x4c, 0x49, 0x4e, 0x45, 0x10,
	0x0f, 0x22, 0x41, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d,
	0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x49, 0x43, 0x4b,
	0x55, 0x50, 0x10, 0x03, 0x22, 0x80, 0x02, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x44, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x4f,
	0x4f, 0x4f, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x4f,
	0x4f, 0x4f, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41, 0x52, 0x52, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x07, 0x12,
	0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x43, 0x45, 0x10,
	0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x53, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44,
	0x54, 0x48, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x4e, 0x54, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x0e, 0x22, 0xdc, 0x10, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x68, 0x65, 0x6c, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x68, 0x65, 0x6c, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x63, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x67, 0x63, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x61, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x12, 0x41, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x75, 0x74,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x12, 0x3c, 0x0a,
	0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x0b,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x32, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72,
	0x6b, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x6b, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x62,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x12, 0x2d, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x45, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6e,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x42, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x34, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6c, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x64, 0x69, 0x61, 0x6c, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x2d, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x2d, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2a,
	0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x04, 0x75, 0x63, 0x69, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x55, 0x43, 0x49, 0x44, 0x52, 0x04, 0x75, 0x63, 0x69, 0x64, 0x12, 0x33, 0x0a,
	0x0b, 0x70, 0x69, 0x6e, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x73, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x49, 0x6e, 0x74, 0x72, 0x69,
	0x6e, 0x73, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x70, 0x69, 0x6e, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69,
	0x63, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0xa2, 0x03, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x41, 0x4c, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x41, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x49, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x49, 0x4e, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x49, 0x4e, 0x47,
	0x42, 0x41, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x48, 0x4f, 0x4c, 0x44, 0x10,
	0x07, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x4e, 0x48, 0x4f, 0x4c, 0x44, 0x50, 0x45, 0x4e, 0x44, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x4e, 0x48,
	0x4f, 0x4c, 0x44, 0x50, 0x45, 0x4e, 0x44, 0x43, 0x4f, 0x4e, 0x46, 0x10, 0x09, 0x12, 0x10, 0x0a,
	0x0c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12,
	0x08, 0x0a, 0x04, 0x42, 0x55, 0x53, 0x59, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47,
	0x46, 0x4f, 0x52, 0x41, 0x43, 0x43, 0x54, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x41, 0x49,
	0x54, 0x49, 0x4e, 0x47, 0x46, 0x4f, 0x52, 0x41, 0x55, 0x54, 0x48, 0x10, 0x0e, 0x12, 0x12, 0x0a,
	0x0e, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x46, 0x4f, 0x52, 0x4c, 0x49, 0x4e, 0x45, 0x10,
	0x0f, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4d, 0x49, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x10, 0x12,
	0x11, 0x0a, 0x0d, 0x41, 0x46, 0x54, 0x45, 0x52, 0x43, 0x41, 0x4c, 0x4c, 0x57, 0x4f, 0x52, 0x4b,
	0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x49, 0x4e, 0x47, 0x49, 0x4e, 0x47, 0x44, 0x49, 0x56,
	0x45, 0x52, 0x54, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x49, 0x4e, 0x47, 0x49, 0x4e, 0x47,
	0x56, 0x4f, 0x49, 0x43, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13, 0x41,
	0x4e, 0x53, 0x57, 0x45, 0x52, 0x45, 0x44, 0x42, 0x59, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x10, 0x14, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x45, 0x41, 0x56, 0x49, 0x4e, 0x47, 0x56,
	0x4f, 0x49, 0x43, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x15, 0x12, 0x0c, 0x0a, 0x08, 0x51, 0x55, 0x45, 0x55, 0x45, 0x49, 0x4e, 0x47, 0x10, 0x16, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x17,
	0x22, 0x41, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e,
	0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x49, 0x43, 0x4b, 0x55,
	0x50, 0x10, 0x03, 0x22, 0x90, 0x02, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x61,
	0x75, 0x73, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x55, 0x4e, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x44, 0x4e, 0x55,
	0x4d, 0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x4f, 0x4f,
	0x4f, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x4f, 0x4f,
	0x4f, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41, 0x52, 0x52, 0x45, 0x44, 0x10, 0x06, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x07, 0x12, 0x11,
	0x0a, 0x0d, 0x4e, 0x4f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0x09, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x0a,
	0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x53, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54,
	0x48, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x4e, 0x54, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x10, 0x0f, 0x22, 0xae, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x4c,
	0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x63,
	0x61, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x74, 0x68, 0x69, 0x73, 0x65, 0x6e, 0x64, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x74, 0x68, 0x69, 0x73, 0x65, 0x6e, 0x64, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x15, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x51,
	0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6e, 0x62, 0x65, 0x68, 0x61, 0x6c,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x62, 0x65, 0x68, 0x61, 0x6c,
	0x66, 0x22, 0x9c, 0x01, 0x0a, 0x12, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x72, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x72, 0x65, 0x66, 0x12, 0x37, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x72, 0x6f,
	0x70, 0x43, 0x61, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x75, 0x74, 0x65, 0x4f,
	0x6e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x75, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x10, 0x03,
	0x22, 0x50, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x63, 0x61, 0x6c, 0x6c,
	0x69, 0x64, 0x22, 0xba, 0x07, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x31, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x31, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x64, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x2e, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x73, 0x74, 0x12,
	0x43, 0x0a, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x70, 0x69, 0x6d, 0x6f, 0x68, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x61, 0x70, 0x69, 0x6d, 0x6f, 0x68, 0x22, 0xce,
	0x04, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x55, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x10, 0x04, 0x12,
	0x11, 0x0a, 0x0d, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x10, 0x06,
	0x12, 0x08, 0x0a, 0x04, 0x44, 0x69, 0x61, 0x6c, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x61,
	0x72, 0x6b, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x75, 0x70, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x0c, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x0d, 0x12, 0x12, 0x0a,
	0x0e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x10, 0x0f, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x10,
	0x10, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x10, 0x11, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x45, 0x43, 0x35, 0x30, 0x30, 0x10, 0x12,
	0x12, 0x12, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x73, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x6e, 0x75,
	0x73, 0x65, 0x64, 0x32, 0x31, 0x10, 0x15, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x10, 0x16, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x10, 0x19, 0x12, 0x14, 0x0a,
	0x10, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x66,
	0x66, 0x10, 0x1a, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4f, 0x6e,
	0x10, 0x1b, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4f, 0x66, 0x66,
	0x10, 0x1c, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x75, 0x74, 0x65, 0x4f, 0x6e, 0x10, 0x1d, 0x12, 0x0b,
	0x0a, 0x07, 0x4d, 0x75, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x10, 0x1e, 0x12, 0x0c, 0x0a, 0x08, 0x55,
	0x6e, 0x75, 0x73, 0x65, 0x64, 0x33, 0x31, 0x10, 0x1f, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x10, 0x20, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x33, 0x33,
	0x10, 0x21, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x10, 0x22, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x10, 0x23, 0x22,
	0xac, 0x02, 0x0a, 0x10, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x61, 0x6b, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64, 0x63, 0x6c, 0x69, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64, 0x63, 0x6c, 0x69,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61,
	0x64, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x64, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x63, 0x6c, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x63, 0x6c, 0x69, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x6a,
	0x0a, 0x08, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x22, 0x24, 0x0a, 0x0a, 0x55, 0x6e,
	0x50, 0x61, 0x72, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x6b,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x64,
	0x22, 0xf1, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x6d, 0x61, 0x6b, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x08, 0x6d, 0x61, 0x6b, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x12, 0x36, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x63, 0x61, 0x6c, 0x6c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0a,
	0x75, 0x6e, 0x70, 0x61, 0x72, 0x6b, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x55, 0x6e, 0x50, 0x61, 0x72, 0x6b, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x0a, 0x75, 0x6e, 0x70, 0x61, 0x72, 0x6b, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x3e,
	0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x68, 0x69, 0x6e, 0x74, 0x22, 0x44,
	0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53,
	0x4b, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x41, 0x4e, 0x59,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4f, 0x46, 0x54, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x41,
	0x4e, 0x59, 0x10, 0x03, 0x22, 0x95, 0x01, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43,
	0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x2a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f,
	0x73, 0x74, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x6c, 0x6f, 0x73, 0x74, 0x22, 0xf4, 0x01, 0x0a,
	0x10, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x6c, 0x72, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x73, 0x61, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x41, 0x62, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x70, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x77, 0x64, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x66, 0x77, 0x64, 0x75, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x6d, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x76, 0x6d, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x6c, 0x72, 0x65, 0x66, 0x22, 0x52, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x05, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x51, 0x0a, 0x11, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x26,
	0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x5e, 0x0a, 0x0e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x22,
	0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03, 0x61,
	0x64, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x45, 0x0a, 0x13,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x72, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x63, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x63, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x22, 0x2f, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64,
	0x75, 0x6d, 0x6d, 0x79, 0x22, 0x28, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x61,
	0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x75, 0x6d, 0x6d,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x22, 0x2c,
	0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x22, 0x3d, 0x0a, 0x0b,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x65,
	0x78, 0x74, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x74, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x39, 0x0a, 0x0c, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x73, 0x0a, 0x07, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f,
	0x78, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x61, 0x76, 0x65, 0x64, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x61,
	0x76, 0x65, 0x64, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xcc, 0x03, 0x0a, 0x0b,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65,
	0x78, 0x74, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x74, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6b, 0x61, 0x74, 0x61, 0x6b, 0x61, 0x6e, 0x61, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x61, 0x74, 0x61, 0x6b,
	0x61, 0x6e, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x69, 0x6e, 0x67, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x72, 0x69, 0x6e, 0x67, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x6e, 0x6f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x0c, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x61,
	0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c,
	0x62, 0x6f, 0x78, 0x22, 0x35, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x53, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4f, 0x53, 0x10, 0x03, 0x22, 0x28, 0x0a, 0x0c, 0x53, 0x65,
	0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x35, 0x0a, 0x0b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x6e,
	0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10,
	0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4f, 0x53,
	0x10, 0x03, 0x22, 0x99, 0x02, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0e, 0x73, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x36, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x65,
	0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x68,
	0x0a, 0x0e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x67, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x63,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x63, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x06, 0x0a, 0x0a, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x74, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x74, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6b,
	0x61, 0x74, 0x61, 0x6b, 0x61, 0x6e, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6b, 0x61, 0x74, 0x61, 0x6b, 0x61, 0x6e, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x64, 0x6e,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x72, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x62, 0x61, 0x72, 0x72, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x78, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x78,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x67, 0x65,
	0x64, 0x69, 0x6e, 0x65, 0x78, 0x74, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x69, 0x6e, 0x65, 0x78, 0x74, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x6e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x6e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x64, 0x6f, 0x66, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x6f, 0x66, 0x66, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x41, 0x62, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x27, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78,
	0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x6e,
	0x6f, 0x61, 0x70, 0x70, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x61, 0x70, 0x70, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x63, 0x35, 0x30, 0x30, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x65, 0x63, 0x35, 0x30, 0x30, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x77, 0x64, 0x75, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x77, 0x64, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x77, 0x64,
	0x62, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x77, 0x64, 0x62, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x77, 0x64, 0x6e, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x77,
	0x64, 0x6e, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x77, 0x64, 0x68, 0x67, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x77, 0x64, 0x68, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x77, 0x64,
	0x75, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x77, 0x64, 0x75, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x77, 0x64,
	0x62, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x77, 0x64, 0x62, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x77, 0x64,
	0x74, 0x6f, 0x76, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x77, 0x64, 0x74,
	0x6f, 0x76, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x22, 0x53, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x63, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63,
	0x63, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x21, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x41, 0x43, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x74, 0x22, 0x23, 0x0a, 0x0f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x43, 0x35, 0x30, 0x30, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x74, 0x22, 0x4e,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x62, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x62,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x7a,
	0x0a, 0x14, 0x54, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70,
	0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x78,
	0x74, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x74, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x65, 0x78, 0x74, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x4e, 0x0a, 0x14, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x74, 0x65,
	0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x5d, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x6b,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x61, 0x6b,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x6b, 0x65, 0x64, 0x65, 0x61,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x61, 0x6b, 0x65, 0x64, 0x65, 0x61,
	0x64, 0x22, 0x5d, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x77, 0x64, 0x55, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x77, 0x64, 0x75, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x77, 0x64, 0x75,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x77, 0x64, 0x74, 0x6f, 0x76,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x77, 0x64, 0x74, 0x6f, 0x76, 0x6d,
	0x22, 0xd8, 0x02, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x03, 0x73, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x41,
	0x43, 0x52, 0x03, 0x73, 0x61, 0x63, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x07, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x65, 0x63, 0x35,
	0x30, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x43, 0x35, 0x30, 0x30, 0x52,
	0x05, 0x65, 0x63, 0x35, 0x30, 0x30, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x65, 0x78, 0x74, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x78, 0x74, 0x6e, 0x52,
	0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x65, 0x78, 0x74, 0x6e, 0x12, 0x25, 0x0a, 0x03, 0x61, 0x70,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70,
	0x70, 0x12, 0x28, 0x0a, 0x04, 0x66, 0x77, 0x64, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x77, 0x64, 0x55, 0x52, 0x04, 0x66, 0x77, 0x64, 0x75, 0x22, 0x26, 0x0a, 0x0e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x22, 0x47, 0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x67, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x74, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x74, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x0a,
	0x4c, 0x69, 0x6e, 0x65, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x65, 0x78, 0x74, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78,
	0x74, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x08, 0x61, 0x64, 0x64,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x75, 0x73, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x0b, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x75, 0x73, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x22,
	0xd8, 0x03, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x32, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x12, 0x29, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x69,
	0x6e, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x38, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x50, 0x61, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0e, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x4b, 0x0a, 0x09, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x41, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x64, 0x22, 0xcb, 0x03, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a,
	0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x72, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x47, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x39, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6d, 0x64, 0x69, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x69, 0x6e, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x73, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6d, 0x64, 0x69, 0x6e, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x69, 0x6e, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x60, 0x0a, 0x0a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x43, 0x6d, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x64, 0x12, 0x29, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x74, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x6b, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x07, 0x67, 0x65, 0x74, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x67, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x45, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x50, 0x0a,
	0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0xba, 0x02, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6d, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a,
	0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48,
	0x00, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x26,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x67, 0x0a, 0x0f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x81, 0x04, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x63, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6d, 0x64, 0x48, 0x00, 0x52, 0x0a,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x63, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x63, 0x6d, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6d, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6e, 0x64, 0x48,
	0x00, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x65, 0x6e, 0x64, 0x12,
	0x4d, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x35,
	0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2f, 0x0a,
	0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x61, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x63,
	0x6b, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x61, 0x63, 0x6b, 0x42, 0x09,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f, 0x69,
	0x70, 0x6f, 0x5f, 0x6d, 0x74, 0x63, 0x74, 0x69, 0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_ipo_mtcti3_proto_rawDescOnce sync.Once
	file_ipo_mtcti3_proto_rawDescData = file_ipo_mtcti3_proto_rawDesc
)

func file_ipo_mtcti3_proto_rawDescGZIP() []byte {
	file_ipo_mtcti3_proto_rawDescOnce.Do(func() {
		file_ipo_mtcti3_proto_rawDescData = protoimpl.X.CompressGZIP(file_ipo_mtcti3_proto_rawDescData)
	})
	return file_ipo_mtcti3_proto_rawDescData
}

var file_ipo_mtcti3_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_ipo_mtcti3_proto_msgTypes = make([]protoimpl.MessageInfo, 68)
var file_ipo_mtcti3_proto_goTypes = []interface{}{
	(TrunkInfo_TrunkType)(0),          // 0: main.TrunkInfo.TrunkType
	(ConferenceMember_State)(0),       // 1: main.ConferenceMember.State
	(ConferenceMember_Direction)(0),   // 2: main.ConferenceMember.Direction
	(ConferenceMember_FailedCause)(0), // 3: main.ConferenceMember.FailedCause
	(CallInfo_State)(0),               // 4: main.CallInfo.State
	(CallInfo_Direction)(0),           // 5: main.CallInfo.Direction
	(CallInfo_FailedCause)(0),         // 6: main.CallInfo.FailedCause
	(MemberFunctionData_Action)(0),    // 7: main.MemberFunctionData.Action
	(CallFunction_Action)(0),          // 8: main.CallFunction.Action
	(UpdateCallControl_Device)(0),     // 9: main.UpdateCallControl.Device
	(NotifyQueue_ServiceMode)(0),      // 10: main.NotifyQueue.ServiceMode
	(SetServiceMode_ServiceMode)(0),   // 11: main.SetServiceMode.ServiceMode
	(*PartyInfo)(nil),                 // 12: main.PartyInfo
	(*DialInfo)(nil),                  // 13: main.DialInfo
	(*TrunkInfo)(nil),                 // 14: main.TrunkInfo
	(*QueueInfo)(nil),                 // 15: main.QueueInfo
	(*EndInfo)(nil),                   // 16: main.EndInfo
	(*Target)(nil),                    // 17: main.Target
	(*Targets)(nil),                   // 18: main.Targets
	(*PIntrinsics)(nil),               // 19: main.PIntrinsics
	(*UCID)(nil),                      // 20: main.UCID
	(*Notes)(nil),                     // 21: main.Notes
	(*CallData)(nil),                  // 22: main.CallData
	(*Absence)(nil),                   // 23: main.Absence
	(*ConferenceMember)(nil),          // 24: main.ConferenceMember
	(*CallInfo)(nil),                  // 25: main.CallInfo
	(*CallLost)(nil),                  // 26: main.CallLost
	(*AgentRecordingControl)(nil),     // 27: main.AgentRecordingControl
	(*ShortCodeData)(nil),             // 28: main.ShortCodeData
	(*MemberFunctionData)(nil),        // 29: main.MemberFunctionData
	(*CallInstance)(nil),              // 30: main.CallInstance
	(*CallFunction)(nil),              // 31: main.CallFunction
	(*AdvancedMakeCall)(nil),          // 32: main.AdvancedMakeCall
	(*MakeCall)(nil),                  // 33: main.MakeCall
	(*UnParkCall)(nil),                // 34: main.UnParkCall
	(*UpdateCallControl)(nil),         // 35: main.UpdateCallControl
	(*NotifyCallControl)(nil),         // 36: main.NotifyCallControl
	(*NotifyPresentity)(nil),          // 37: main.NotifyPresentity
	(*Presentity)(nil),                // 38: main.Presentity
	(*NotifyPresence)(nil),            // 39: main.NotifyPresence
	(*SubscribePresence)(nil),         // 40: main.SubscribePresence
	(*UpdatePresence)(nil),            // 41: main.UpdatePresence
	(*SubscribeParkServer)(nil),       // 42: main.SubscribeParkServer
	(*SubscribeRefreshWrapper)(nil),   // 43: main.SubscribeRefreshWrapper
	(*NotifyParkServer)(nil),          // 44: main.NotifyParkServer
	(*NotifyRefreshWrapper)(nil),      // 45: main.NotifyRefreshWrapper
	(*QueueMember)(nil),               // 46: main.QueueMember
	(*QueueMembers)(nil),              // 47: main.QueueMembers
	(*Mailbox)(nil),                   // 48: main.Mailbox
	(*NotifyQueue)(nil),               // 49: main.NotifyQueue
	(*SetVoicemail)(nil),              // 50: main.SetVoicemail
	(*SetServiceMode)(nil),            // 51: main.SetServiceMode
	(*UpdateQueue)(nil),               // 52: main.UpdateQueue
	(*SubscribeQueue)(nil),            // 53: main.SubscribeQueue
	(*NotifyUser)(nil),                // 54: main.NotifyUser
	(*SubscribeUser)(nil),             // 55: main.SubscribeUser
	(*UpdateUserSAC)(nil),             // 56: main.UpdateUserSAC
	(*UpdateUserEC500)(nil),           // 57: main.UpdateUserEC500
	(*UpdateUserAbsence)(nil),         // 58: main.UpdateUserAbsence
	(*TeleworkerConnection)(nil),      // 59: main.TeleworkerConnection
	(*UpdateUserLoginExtn)(nil),       // 60: main.UpdateUserLoginExtn
	(*UpdateUserApp)(nil),             // 61: main.UpdateUserApp
	(*UpdateUserFwdU)(nil),            // 62: main.UpdateUserFwdU
	(*UpdateUser)(nil),                // 63: main.UpdateUser
	(*SubscribeLines)(nil),            // 64: main.SubscribeLines
	(*LinesUser)(nil),                 // 65: main.LinesUser
	(*LinesQueue)(nil),                // 66: main.LinesQueue
	(*NotifyLines)(nil),               // 67: main.NotifyLines
	(*Notify)(nil),                    // 68: main.Notify
	(*NotifyAck)(nil),                 // 69: main.NotifyAck
	(*Subscribe)(nil),                 // 70: main.Subscribe
	(*GetFile)(nil),                   // 71: main.GetFile
	(*GetFileResponse)(nil),           // 72: main.GetFileResponse
	(*GeneralCmd)(nil),                // 73: main.GeneralCmd
	(*GeneralData)(nil),               // 74: main.GeneralData
	(*SubscribeEnd)(nil),              // 75: main.SubscribeEnd
	(*SubscribeTerminated)(nil),       // 76: main.SubscribeTerminated
	(*SubscribeCmd)(nil),              // 77: main.SubscribeCmd
	(*RequestResponse)(nil),           // 78: main.RequestResponse
	(*Message)(nil),                   // 79: main.Message
}
var file_ipo_mtcti3_proto_depIdxs = []int32{
	0,  // 0: main.TrunkInfo.trunktype:type_name -> main.TrunkInfo.TrunkType
	12, // 1: main.Target.partyinfo:type_name -> main.PartyInfo
	17, // 2: main.Targets.target:type_name -> main.Target
	1,  // 3: main.ConferenceMember.state:type_name -> main.ConferenceMember.State
	2,  // 4: main.ConferenceMember.direction:type_name -> main.ConferenceMember.Direction
	12, // 5: main.ConferenceMember.connectedparty:type_name -> main.PartyInfo
	3,  // 6: main.ConferenceMember.failedcause:type_name -> main.ConferenceMember.FailedCause
	4,  // 7: main.CallInfo.state:type_name -> main.CallInfo.State
	5,  // 8: main.CallInfo.direction:type_name -> main.CallInfo.Direction
	12, // 9: main.CallInfo.callingparty:type_name -> main.PartyInfo
	12, // 10: main.CallInfo.connectedparty:type_name -> main.PartyInfo
	12, // 11: main.CallInfo.originalcalledparty:type_name -> main.PartyInfo
	6,  // 12: main.CallInfo.failedcause:type_name -> main.CallInfo.FailedCause
	23, // 13: main.CallInfo.absence:type_name -> main.Absence
	16, // 14: main.CallInfo.remoteinfo:type_name -> main.EndInfo
	16, // 15: main.CallInfo.localinfo:type_name -> main.EndInfo
	24, // 16: main.CallInfo.conferencemember:type_name -> main.ConferenceMember
	13, // 17: main.CallInfo.dialinfo:type_name -> main.DialInfo
	14, // 18: main.CallInfo.trunkinfo:type_name -> main.TrunkInfo
	15, // 19: main.CallInfo.queueinfo:type_name -> main.QueueInfo
	22, // 20: main.CallInfo.calldata:type_name -> main.CallData
	21, // 21: main.CallInfo.notes:type_name -> main.Notes
	20, // 22: main.CallInfo.ucid:type_name -> main.UCID
	19, // 23: main.CallInfo.pintrinsics:type_name -> main.PIntrinsics
	18, // 24: main.CallInfo.targets:type_name -> main.Targets
	7,  // 25: main.MemberFunctionData.action:type_name -> main.MemberFunctionData.Action
	8,  // 26: main.CallFunction.action:type_name -> main.CallFunction.Action
	28, // 27: main.CallFunction.shortcodedata:type_name -> main.ShortCodeData
	29, // 28: main.CallFunction.memberfunctiondata:type_name -> main.MemberFunctionData
	30, // 29: main.CallFunction.callinst:type_name -> main.CallInstance
	27, // 30: main.CallFunction.agentrecording:type_name -> main.AgentRecordingControl
	32, // 31: main.MakeCall.advanced:type_name -> main.AdvancedMakeCall
	33, // 32: main.UpdateCallControl.makecall:type_name -> main.MakeCall
	31, // 33: main.UpdateCallControl.callfunction:type_name -> main.CallFunction
	34, // 34: main.UpdateCallControl.unparkcall:type_name -> main.UnParkCall
	9,  // 35: main.UpdateCallControl.devicehint:type_name -> main.UpdateCallControl.Device
	25, // 36: main.NotifyCallControl.callinfo:type_name -> main.CallInfo
	26, // 37: main.NotifyCallControl.calllost:type_name -> main.CallLost
	23, // 38: main.NotifyPresentity.absence:type_name -> main.Absence
	37, // 39: main.NotifyPresence.entry:type_name -> main.NotifyPresentity
	38, // 40: main.SubscribePresence.entry:type_name -> main.Presentity
	38, // 41: main.UpdatePresence.add:type_name -> main.Presentity
	38, // 42: main.UpdatePresence.remove:type_name -> main.Presentity
	46, // 43: main.QueueMembers.member:type_name -> main.QueueMember
	10, // 44: main.NotifyQueue.servicemode:type_name -> main.NotifyQueue.ServiceMode
	47, // 45: main.NotifyQueue.queuemembers:type_name -> main.QueueMembers
	48, // 46: main.NotifyQueue.mailbox:type_name -> main.Mailbox
	11, // 47: main.SetServiceMode.servicemode:type_name -> main.SetServiceMode.ServiceMode
	51, // 48: main.UpdateQueue.setservicemode:type_name -> main.SetServiceMode
	50, // 49: main.UpdateQueue.setvoicemail:type_name -> main.SetVoicemail
	47, // 50: main.UpdateQueue.members:type_name -> main.QueueMembers
	46, // 51: main.UpdateQueue.addmember:type_name -> main.QueueMember
	46, // 52: main.UpdateQueue.deletemember:type_name -> main.QueueMember
	23, // 53: main.NotifyUser.absence:type_name -> main.Absence
	48, // 54: main.NotifyUser.mailbox:type_name -> main.Mailbox
	23, // 55: main.UpdateUserAbsence.absence:type_name -> main.Absence
	59, // 56: main.UpdateUserLoginExtn.teleworkerconnection:type_name -> main.TeleworkerConnection
	56, // 57: main.UpdateUser.sac:type_name -> main.UpdateUserSAC
	58, // 58: main.UpdateUser.absence:type_name -> main.UpdateUserAbsence
	57, // 59: main.UpdateUser.ec500:type_name -> main.UpdateUserEC500
	28, // 60: main.UpdateUser.shortcodedata:type_name -> main.ShortCodeData
	60, // 61: main.UpdateUser.loginextn:type_name -> main.UpdateUserLoginExtn
	61, // 62: main.UpdateUser.app:type_name -> main.UpdateUserApp
	62, // 63: main.UpdateUser.fwdu:type_name -> main.UpdateUserFwdU
	65, // 64: main.NotifyLines.adduser:type_name -> main.LinesUser
	66, // 65: main.NotifyLines.addqueue:type_name -> main.LinesQueue
	65, // 66: main.NotifyLines.deleteuser:type_name -> main.LinesUser
	66, // 67: main.NotifyLines.deletequeue:type_name -> main.LinesQueue
	65, // 68: main.NotifyLines.changeuser:type_name -> main.LinesUser
	66, // 69: main.NotifyLines.changequeue:type_name -> main.LinesQueue
	39, // 70: main.Notify.presence:type_name -> main.NotifyPresence
	36, // 71: main.Notify.callcontrol:type_name -> main.NotifyCallControl
	67, // 72: main.Notify.lines:type_name -> main.NotifyLines
	54, // 73: main.Notify.user:type_name -> main.NotifyUser
	49, // 74: main.Notify.queue:type_name -> main.NotifyQueue
	44, // 75: main.Notify.parkserver:type_name -> main.NotifyParkServer
	45, // 76: main.Notify.refreshwrapper:type_name -> main.NotifyRefreshWrapper
	40, // 77: main.Subscribe.presence:type_name -> main.SubscribePresence
	64, // 78: main.Subscribe.lines:type_name -> main.SubscribeLines
	55, // 79: main.Subscribe.user:type_name -> main.SubscribeUser
	53, // 80: main.Subscribe.queue:type_name -> main.SubscribeQueue
	42, // 81: main.Subscribe.parkserver:type_name -> main.SubscribeParkServer
	43, // 82: main.Subscribe.refreshwrapper:type_name -> main.SubscribeRefreshWrapper
	71, // 83: main.GeneralCmd.getfile:type_name -> main.GetFile
	72, // 84: main.GeneralData.getfile:type_name -> main.GetFileResponse
	41, // 85: main.SubscribeCmd.presence:type_name -> main.UpdatePresence
	35, // 86: main.SubscribeCmd.callcontrol:type_name -> main.UpdateCallControl
	63, // 87: main.SubscribeCmd.user:type_name -> main.UpdateUser
	52, // 88: main.SubscribeCmd.queue:type_name -> main.UpdateQueue
	78, // 89: main.Message.response:type_name -> main.RequestResponse
	73, // 90: main.Message.generalcmd:type_name -> main.GeneralCmd
	70, // 91: main.Message.subscribe:type_name -> main.Subscribe
	77, // 92: main.Message.subscribecmd:type_name -> main.SubscribeCmd
	75, // 93: main.Message.subscribeend:type_name -> main.SubscribeEnd
	76, // 94: main.Message.subscribeterminated:type_name -> main.SubscribeTerminated
	74, // 95: main.Message.generaldata:type_name -> main.GeneralData
	68, // 96: main.Message.notify:type_name -> main.Notify
	69, // 97: main.Message.notifyack:type_name -> main.NotifyAck
	98, // [98:98] is the sub-list for method output_type
	98, // [98:98] is the sub-list for method input_type
	98, // [98:98] is the sub-list for extension type_name
	98, // [98:98] is the sub-list for extension extendee
	0,  // [0:98] is the sub-list for field type_name
}

func init() { file_ipo_mtcti3_proto_init() }
func file_ipo_mtcti3_proto_init() {
	if File_ipo_mtcti3_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ipo_mtcti3_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrunkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Targets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PIntrinsics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UCID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Absence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConferenceMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallLost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentRecordingControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortCodeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberFunctionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancedMakeCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnParkCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCallControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyCallControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyPresentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Presentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyPresence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribePresence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePresence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeParkServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRefreshWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyParkServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyRefreshWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueMembers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mailbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVoicemail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetServiceMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserSAC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserEC500); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserAbsence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeleworkerConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserLoginExtn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserFwdU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeLines); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinesUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinesQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyLines); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscribe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeTerminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipo_mtcti3_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ipo_mtcti3_proto_msgTypes[56].OneofWrappers = []interface{}{
		(*Notify_Presence)(nil),
		(*Notify_Callcontrol)(nil),
		(*Notify_Lines)(nil),
		(*Notify_User)(nil),
		(*Notify_Queue)(nil),
		(*Notify_Parkserver)(nil),
		(*Notify_Refreshwrapper)(nil),
	}
	file_ipo_mtcti3_proto_msgTypes[58].OneofWrappers = []interface{}{
		(*Subscribe_Presence)(nil),
		(*Subscribe_Lines)(nil),
		(*Subscribe_User)(nil),
		(*Subscribe_Queue)(nil),
		(*Subscribe_Parkserver)(nil),
		(*Subscribe_Refreshwrapper)(nil),
	}
	file_ipo_mtcti3_proto_msgTypes[61].OneofWrappers = []interface{}{
		(*GeneralCmd_Getfile)(nil),
	}
	file_ipo_mtcti3_proto_msgTypes[62].OneofWrappers = []interface{}{
		(*GeneralData_Getfile)(nil),
	}
	file_ipo_mtcti3_proto_msgTypes[65].OneofWrappers = []interface{}{
		(*SubscribeCmd_Timeout)(nil),
		(*SubscribeCmd_Presence)(nil),
		(*SubscribeCmd_Callcontrol)(nil),
		(*SubscribeCmd_User)(nil),
		(*SubscribeCmd_Queue)(nil),
	}
	file_ipo_mtcti3_proto_msgTypes[67].OneofWrappers = []interface{}{
		(*Message_Response)(nil),
		(*Message_Generalcmd)(nil),
		(*Message_Subscribe)(nil),
		(*Message_Subscribecmd)(nil),
		(*Message_Subscribeend)(nil),
		(*Message_Subscribeterminated)(nil),
		(*Message_Generaldata)(nil),
		(*Message_Notify)(nil),
		(*Message_Notifyack)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ipo_mtcti3_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   68,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ipo_mtcti3_proto_goTypes,
		DependencyIndexes: file_ipo_mtcti3_proto_depIdxs,
		EnumInfos:         file_ipo_mtcti3_proto_enumTypes,
		MessageInfos:      file_ipo_mtcti3_proto_msgTypes,
	}.Build()
	File_ipo_mtcti3_proto = out.File
	file_ipo_mtcti3_proto_rawDesc = nil
	file_ipo_mtcti3_proto_goTypes = nil
	file_ipo_mtcti3_proto_depIdxs = nil
}
